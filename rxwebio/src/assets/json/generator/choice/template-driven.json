{"rightSidebarLinks":[{"id":"choice","title":"choice (Template Driven)","subLink":null},{"id":"whentouse","title":"When to use","subLink":[]},{"id":"basicchoicevalidation","title":"Basic choice Validation","subLink":[]},{"id":"choiceconfig","title":"ChoiceConfig","subLink":[{"title":"minLength","id":"minlength"},{"title":"maxLength","id":"maxlength"},{"title":"conditionalExpression","id":"conditionalexpression"},{"title":"message","id":"message"}]},{"id":"completechoiceexample","title":"Complete choice Example","subLink":[]},{"id":"dynamicchoiceexample","title":"Dynamic choice Example","subLink":[]},{"id":"githubissues","title":"choice Github Issues","subLink":null},{"id":"discussion","title":"Discussion","subLink":null}],"title":"choice","description":" choice validation decorator will check whether the value entered is matching the properties defined.","validatorType":"Template Driven","tabArray":{"complete":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-choice-complete\"></div>\r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"choice-complete-component\"></div> \r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"choice-complete-html\"></div> \r\n"}],"dynamic":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-choice-dynamic\"></div>\r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"choice-dynamic-component\"></div>\r\n"},{"tabName":"Json","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"choice-dynamic-json\"></div>\r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"choice-dynamic-html\"></div> \r\n"}]},"innerHtml":null,"htmlContent":"<p>--s</p>\r\n<p>title: choice </p>\r\n<p>description: choice validation decorator will check whether the value entered is matching the properties defined.</p>\r\n<p>author: rxcontributortwo</p>\r\n<p>--</p>\r\n<div class='row' id= 'whentouse'>\r\n<div class='col-lg-12'>\r\n<h2>When to use</h2>\r\n\r\n<p>Suppose you want to create a employee form in which you want employee to enter value of a particular choice which contains fields like department, hobbies and skills.Here the field is taken in the form of array and according to that the choice is applied on the property by applying minlength and maxLength. Here depending upon the requirement these scenarios may arise.</p>\r\n<ol>\r\n    <li>The skills field in which you want the user to enter maximum three skills and minimum of one skill.</li>\r\n    <li>Apply choice validation based on matched condition in the form, like if the department  is ‘dotnet’ then the skills value should be maximum three and minimum one.</li>\r\n    <li>The Custom Message on Hobbies field.</li>\r\n    <li>Apply choice validation dynamically based on server rules.</li>\r\n</ol>\r\n<p>Let’s see how choice decorator fulfil the need.</p>\r\n</div></div>\r\n<div class='row' id= 'basicchoicevalidation'>\r\n<div class='col-lg-12'>\r\n<h2>Basic choice Validation</h2>\r\n\r\n<p>Through Angular FormBuilder service we create FormGroup in the component.</p>\r\n<p>Here we have covered Add and Edit form operations. </p>\r\n<div component=\"app-code\" key=\"choice-add-component\"></div> \r\n<p>Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"choice-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-choice-add\"></div>\r\n</div></div>\r\n<div class='row' id= 'choiceconfig'>\r\n<div class='col-lg-12'>\r\n<h2>ChoiceConfig</h2>\r\n\r\n<p>Below options are not mandatory to use in the <span class='highlighted'>@choice()</span> decorator. If needed then use the below options.</p>\r\n<table class=\"table table-bordered table-striped\">\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr><td><a href=\"#minLength\" (click)='scrollTo(\"#minLength\")' title=\"#minLength\">minLength</a></td><td>minLength  is to define a minLength of field which is in form of array</td></tr>\r\n<tr><td><a href=\"#maxLength\" (click)='scrollTo(\"#maxLength\")' title=\"#maxLength\">maxLength</a></td><td>maxLength  is to define a maxLength of field which is in form of array</td></tr>\r\n<tr><td><a href=\"#conditionalExpression\" (click)='scrollTo(\"#conditionalExpression\")' title=\"conditionalExpression\">conditionalExpression</a></td><td>Choice validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work as same as client function.</td></tr>\r\n<tr><td><a href=\"#message\" (click)='scrollTo(\"#message\")' title=\"message\">message</a></td><td>To override the global configuration message and show the custom message on particular control property.</td></tr>\r\n</table>\r\n</div></div>\r\n<div class='row' id= 'minlength'>\r\n<div class='col-lg-12'>\r\n<h2>minLength</h2>\r\n\r\n<p>Type :  <span class='highlighted'>number</span> </p>\r\n<p>minLength  is to define a minLength of field which is in form of array</p>\r\n<div component=\"app-code\" key=\"choice-minLengthExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-choice-minLength\" title=\"choice decorators with minLength\" key=\"minLength\"></div>\r\n</div></div>\r\n<div class='row' id= 'maxlength'>\r\n<div class='col-lg-12'>\r\n<h2>maxLength</h2>\r\n\r\n<p>Type :  <span class='highlighted'>number</span> </p>\r\n<p>maxLength number is for define a maxLength number of range</p>\r\n<div component=\"app-code\" key=\"choice-maxLengthExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-choice-maxLength\" title=\"choice decorators with maxLength\" key=\"maxLength\"></div>\r\n</div></div>\r\n<div class='row' id= 'conditionalexpression'>\r\n<div class='col-lg-12'>\r\n<h2>conditionalExpression</h2>\r\n\r\n<p>Type :  <span class='highlighted'>Function</span>  |  <span class='highlighted'>string</span> </p>\r\n<p>choice validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.</p>\r\n<p>If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work as same as client function.</p>\r\n<blockquote><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>Function</span> object. </p></blockquote>\r\n<div component=\"app-code\" key=\"choice-conditionalExpressionExampleFunction-model\"></div> \r\n<blockquote><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>string</span> object. </p></blockquote>\r\n<div component=\"app-code\" key=\"choice-conditionalExpressionExampleString-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-choice-conditionalExpression\" title=\"choice decorators with conditionalExpression\" key=\"conditionalExpression\"></div>\r\n</div></div>\r\n<div class='row' id= 'message'>\r\n<div class='col-lg-12'>\r\n<h2>message</h2>\r\n\r\n<p>Type :  <span class='highlighted'>string</span> </p>\r\n<p>To override the global configuration message and show the custom message on particular control property.</p>\r\n<div component=\"app-code\" key=\"choice-messageExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-choice-message\" title=\"choice decorators with message\" key=\"message\"></div>\r\n</div></div>\r\n<div class='row' id= 'completechoiceexample'>\r\n<div class='col-lg-12'>\r\n<h2>Complete choice Example</h2>\r\n\r\n<p>This Complete choice example which includes all the ChoiceConfig properties will fulfil the requirement of scenarios 1, 2 and 3.</p>\r\n<div component=\"app-tabs\" key=\"complete\"></div>\r\n</div></div>\r\n<div class='row' id= 'dynamicchoiceexample'>\r\n<div class='col-lg-12'>\r\n<h2>Dynamic choice Example</h2>\r\n\r\n<p>This Dynamic Choice example which execute based on json passed. conditional expression with function would be not apply in dynamic choice example. </p>\r\n<div component=\"app-tabs\" key=\"dynamic\"></div>\r\n</div></div>\r\n<div class=\"row\">\r\n<div class=\"col-lg-12\">\r\n<app-disqus></app-disqus>\r\n</div>\r\n</div>\r\n"}