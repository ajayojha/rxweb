{"rightSidebarLinks":[{"id":"uppercase","title":"upperCase (Decorator)","subLink":null},{"id":"whentouse","title":"When to use","subLink":[]},{"id":"basicuppercasevalidation","title":"Basic UpperCase Validation","subLink":[]},{"id":"messageconfig","title":"MessageConfig","subLink":[{"title":"conditionalExpression","id":"conditionalexpression"},{"title":"message","id":"message"}]},{"id":"completeuppercaseexample","title":"Complete upperCase Example","subLink":[]},{"id":"dynamicuppercaseexample","title":"Dynamic upperCase Example","subLink":[]},{"id":"githubissues","title":"upperCase Github Issues","subLink":null},{"id":"discussion","title":"Discussion","subLink":null}],"title":"upperCase","description":" UpperCase validation decorator will allow user to enter the alphabets only in the upperCase format.","validatorType":"Decorators","tabArray":{"basic-operations":[{"tabName":"Add","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"upperCase-add-component\"></div> \r\n<p>Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"upperCase-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-upperCase-add\"></div>\r\n"},{"tabName":"Edit","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"upperCase-edit-component\"></div>\r\n<p>The below code is `location-data.json` for getting data from the server </p>\r\n<div component=\"app-code\" key=\"data-upperCase\"></div> \r\n<p>Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"upperCase-edit-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-upperCase-edit\"></div>\r\n"}],"complete":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-upperCase-complete\"></div>\r\n"},{"tabName":"Model","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"upperCase-complete-model\"></div> \r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"upperCase-complete-component\"></div> \r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"upperCase-complete-html\"></div> \r\n"}],"dynamic":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-upperCase-dynamic\"></div>\r\n"},{"tabName":"Model","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"upperCase-dynamic-model\"></div>\r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"upperCase-dynamic-json\"></div>\r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"upperCase-dynamic-html\"></div> \r\n"}]},"innerHtml":null,"htmlContent":"<div class='row' id= 'whentouse'>\r\n<div class='col-lg-12'>\r\n<h2>When to use</h2>\r\n\r\n<p>Suppose you want to create a Location form, which contains fields like CountryName, StateName, CityName and you want the user to must enter string only in the Upper case. Here depending upon the requirement these scenarios may arise.</p>\r\n<ol>\r\n    <li>Apply upperCase validation in the CountryName without any condition.</li>\r\n    <li>Apply upperCase validation based on matched condition in the form, like if the CountryName is <span class='highlighted'>INDIA</span>, then only the upperCase validation will be applied to StateName field.</li>\r\n\t<li>Adding Custom Message on CityName Field.</li>\r\n\t<li>Apply upperCase validation dynamically based on server rules.</li>\r\n</ol>\r\n<p>Letâ€™s see how upperCase validator fulfil the need.</p>\r\n</div></div>\r\n<div class='row' id= 'basicuppercasevalidation'>\r\n<div class='col-lg-12'>\r\n<h2>Basic UpperCase Validation</h2>\r\n\r\n<p>First we need to create a Location class and define a property of CountryName in the model to achieve the functional need of point 1.</p>\r\n<div component=\"app-code\" key=\"upperCase-add-model\"></div> \r\n<p>Through Angular FormBuilder service we create FormGroup in the component.</p>\r\n<p>Here we have covered Add and Edit form operations. </p>\r\n<div component=\"app-tabs\" key=\"basic-operations\"></div>\r\n</div></div>\r\n<div class='row' id= 'messageconfig'>\r\n<div class='col-lg-12'>\r\n<h2>MessageConfig</h2>\r\n\r\n<p>Below options are not mandatory to use in the <span class='highlighted'>@upperCase()</span> decorator. If needed then use the below options.</p>\r\n<table class=\"table table-bordered table-striped\">\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr><td><a href=\"#conditionalExpression\" (click)='scrollTo(\"#conditionalExpression\")' title=\"conditionalExpression\">conditionalExpression</a></td><td>upperCase validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work as same as client function.</td></tr>\r\n<tr><td><a href=\"#message\" (click)='scrollTo(\"#message\")' title=\"message\">Message</a></td><td>To override the global configuration message and show the custom message on particular control property.</td></tr>\r\n</div></div>\r\n<div class='row' id= 'conditionalexpression'>\r\n<div class='col-lg-12'>\r\n<h2>conditionalExpression</h2>\r\n\r\n<p>Type :  <span class='highlighted'>Function</span>  |  <span class='highlighted'>string</span> </p>\r\n<p>Uppercase validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.</p>\r\n<p>If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work as same as client function.</p>\r\n<blockquote><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>Function</span> object.</p></blockquote>\r\n<div component=\"app-code\" key=\"upperCase-conditionalExpressionExampleFunction-model\"></div> \r\n<blockquote><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>string</span> object. </p></blockquote>\r\n<div component=\"app-code\" key=\"upperCase-conditionalExpressionExampleString-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-upperCase-conditionalExpression\" title=\"upperCase decorators with conditionalExpression\" key=\"conditionalExpression\"></div>\r\n</div></div>\r\n<div class='row' id= 'message'>\r\n<div class='col-lg-12'>\r\n<h2>message</h2>\r\n\r\n<p>Type :  <span class='highlighted'>string</span> </p>\r\n<p>To override the global configuration message and show the custom message on particular control property.</p>\r\n<div component=\"app-code\" key=\"upperCase-messageExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-upperCase-message\" title=\"upperCase decorators with message\" key=\"message\"></div>\r\n</div></div>\r\n<div class='row' id= 'completeuppercaseexample'>\r\n<div class='col-lg-12'>\r\n<h2>Complete upperCase Example</h2>\r\n\r\n<p>This Complete upperCase example which includes all the MessageConfig properties will fulfil the requirement of scenarios 1, 2 and 3.</p>\r\n<div component=\"app-tabs\" key=\"complete\"></div>\r\n</div></div>\r\n<div class='row' id= 'dynamicuppercaseexample'>\r\n<div class='col-lg-12'>\r\n<h2>Dynamic upperCase Example</h2>\r\n\r\n<p>This Dynamic upperCase example which execute based on json passed. conditional expression with function would be not apply in dynamic upperCase example. </p>\r\n<div component=\"app-tabs\" key=\"dynamic\"></div>\r\n</div></div>\r\n<div class=\"row\">\r\n<div class=\"col-lg-12\">\r\n<app-disqus></app-disqus>\r\n</div>\r\n</div>\r\n"}