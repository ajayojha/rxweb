{"complete":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-even-complete-template-driven',\r\n    templateUrl: './even-complete.component.html'\r\n})\r\nexport class EvenCompleteTemplateDrivenComponent implements OnInit {\r\n    user: User\r\n\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Type</label>\r\n      <input type=\"text\" name=\"type\" [(ngModel)]=\"user.type\"  class=\"form-control\"  even />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' or 'Even Number', then you need to add 'Type' input as 'Even'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.type?.errors\">{{userForm.controls.type?.errors.even.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Even Number</label>\r\n      <input type=\"text\" name=\"evenNumber\" [(ngModel)]=\"user.evenNumber\"  class=\"form-control\"  [even]=\"{'conditionalExpression':'x => x.type == \\'Even\\''}\" />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Even Number' then you need to add 'Type' input as 'Even'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.evenNumber?.errors\">{{userForm.controls.evenNumber?.errors.even.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Multiples of Even Number</label>\r\n      <input type=\"text\" name=\"multiplesOfEvenNumber\" [(ngModel)]=\"user.multiplesOfEvenNumber\"  class=\"form-control\"  [even]=\"{'message':'Multiples of Even Number is not an even number'}\" />\r\n      <small class=\"form-text text-muted\">you can enter only an even number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.multiplesOfEvenNumber?.errors\">{{userForm.controls.multiplesOfEvenNumber?.errors.even.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"\r\nexport class User {\r\n\r\n\ttype: string;\r\n\r\n\tnumber: number;\r\n\r\n\tevenNumber: number;\r\n\r\n\tmultiplesOfEvenNumber: number;\r\n\r\n}\r\n","json":null},"conditionalExpressionExampleFunction":{"notes":null,"component":null,"html":null,"model":"[even]=\"{'conditionalExpression':(x,y) => x.type == \\'Even\\' }\"","json":null},"conditionalExpression":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-even-conditionalExpression-template-driven',\r\n    templateUrl: './even-conditional-expression.component.html'\r\n})\r\nexport class EvenConditionalExpressionTemplateDrivenComponent implements OnInit {\r\n    user: User\r\n\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Type</label>\r\n      <input type=\"text\" name=\"type\" [(ngModel)]=\"user.type\"  class=\"form-control\"  even />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' or 'Even Number', then you need to add 'Type' input as 'Even'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.type?.errors\">{{userForm.controls.type?.errors.even.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Even Number</label>\r\n      <input type=\"text\" name=\"evenNumber\" [(ngModel)]=\"user.evenNumber\"  class=\"form-control\"  [even]=\"{'conditionalExpression':'x => x.type == \\'Even\\''}\" />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Even Number' then you need to add 'Type' input as 'Even'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.evenNumber?.errors\">{{userForm.controls.evenNumber?.errors.even.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"\r\nexport class User {\r\n\r\n\ttype: string;\r\n\r\n\tevenNumber: number;\r\n\r\n\tnumber: number;\r\n\r\n}\r\n","json":null},"conditionalExpressionExampleString":{"notes":null,"component":null,"html":null,"model":"[even]=\"{'conditionalExpression':'x => x.type == \\'Even\\''}\"","json":null},"messageExample":{"notes":null,"component":null,"html":null,"model":"[even]=\"{'message':'{{0}} is not an even number'}\"","json":null},"message":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-even-message-template-driven',\r\n    templateUrl: './even-message.component.html'\r\n})\r\nexport class EvenMessageTemplateDrivenComponent implements OnInit {\r\n    user: User\r\n\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Multiples of Even Number</label>\r\n      <input type=\"text\" name=\"multiplesOfEvenNumber\" [(ngModel)]=\"user.multiplesOfEvenNumber\"  class=\"form-control\"  [even]=\"{'message':'Multiples of Even Number is not an even number'}\" />\r\n      <small class=\"form-text text-muted\">you can enter only an even number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.multiplesOfEvenNumber?.errors\">{{userForm.controls.multiplesOfEvenNumber?.errors.even.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"\r\nexport class User {\r\n\r\n\tmultiplesOfEvenNumber: number;\r\n\r\n}\r\n","json":null},"add":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-even-add-template-driven',\r\n    templateUrl: './even-add.component.html'\r\n})\r\nexport class EvenAddTemplateDrivenComponent implements OnInit {\r\n    user: User\r\n\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Even Number</label>\r\n      <input type=\"text\" name=\"evenNumber\" [(ngModel)]=\"user.evenNumber\"  class=\"form-control\"  even />\r\n      <small class=\"form-text text-muted\">you can enter only an even number<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.evenNumber?.errors\">{{userForm.controls.evenNumber?.errors.even.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"\r\nexport class User {\r\n\r\n\tevenNumber: number;\r\n\r\n}\r\n","json":null}}