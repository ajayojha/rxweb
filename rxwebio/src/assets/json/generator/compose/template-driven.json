{"rightSidebarLinks":[{"id":"compose","title":"compose (Template Driven)","subLink":null},{"id":"whentouse","title":"When to use","subLink":[]},{"id":"basiccomposevalidation","title":"Basic Compose Validation","subLink":[]},{"id":"composeconfig","title":"ComposeConfig","subLink":[{"title":"validators","id":"validators"},{"title":"conditionalExpression","id":"conditionalexpression"}]},{"id":"completecomposeexample","title":"Complete Compose Example","subLink":[]},{"id":"dynamiccomposeexample","title":"Dynamic Compose Example","subLink":[]},{"id":"githubissues","title":"compose Github Issues","subLink":null},{"id":"discussion","title":"Discussion","subLink":null}],"title":"compose","description":" Compose validation decorator is used to apply multiple validations on a particular field.","validatorType":"Template Driven","tabArray":{"complete":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-compose-complete\"></div>\r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"compose-complete-component\"></div> \r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"compose-complete-html\"></div> \r\n"}],"dynamic":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-compose-dynamic\"></div>\r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"compose-dynamic-component\"></div>\r\n"},{"tabName":"Json","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"compose-dynamic-json\"></div>\r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"compose-dynamic-html\"></div> \r\n"}]},"innerHtml":null,"htmlContent":"<div class='row' id= 'whentouse'>\r\n<div class='col-lg-12'>\r\n<h2>When to use</h2>\r\n\r\n<p>Suppose you want to create UserInfo form, which contains fields like firstName, lastName, age, emailId and you want to apply multiple validations on these fields. Here depending upon the requirement these scenarios may arise.</p>\r\n<ol>\r\n    <li>Apply required and alpha validation on firstName field.</li>\r\n    <li>Apply required, alpha and different validation on lastName field.</li>\r\n    <li>Apply digit, maxNumber and minNumber validation on age field based on matched condition in the form, like if the firstName is 'Bharat', then only the age must be validated.</li>\r\n    <li>Apply required, email and maxLength validation based on matched condition in the form, like if the firstName is 'Bharat', then only the emailId must be validated.</li>\r\n    <li>Apply compose validation dynamically based on server rules.</li>\r\n</ol>\r\n<p>Letâ€™s see how compose decorator fulfil the need.</p>\r\n</div></div>\r\n<div class='row' id= 'basiccomposevalidation'>\r\n<div class='col-lg-12'>\r\n<h2>Basic Compose Validation</h2>\r\n\r\n<p>Through Angular FormBuilder service we create FormGroup in the component.</p>\r\n<p>Here we have covered Add and Edit form operations. </p>\r\n<div component=\"app-code\" key=\"compose-add-component\"></div> \r\n<p>Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"compose-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-compose-add\"></div>\r\n</div></div>\r\n<div class='row' id= 'composeconfig'>\r\n<div class='col-lg-12'>\r\n<h2>ComposeConfig</h2>\r\n\r\n<p>conditionalExpression is not mandatory to use in the <span class='highlighted'>@compose()</span> decorator. If needed then use the below options.</p>\r\n<table class=\"table table-bordered table-striped\">\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr><td><a href=\"#validators\" (click)='scrollTo(\"#validators\")' title=\"validators\">validators</a></td><td>It is an array of rxwebValidators. Validators are set according to the relative requirement based on which validation you want to apply. Here you have to specify the name of validator which you want to use.</td></tr>\r\n<tr><td><a href=\"#conditionalExpression\" (click)='scrollTo(\"#conditionalExpression\")' title=\"conditionalExpression\">conditionalExpression</a></td><td>Compose validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work as same as client function.</td></tr>\r\n</table>\r\n</div></div>\r\n<div class='row' id= 'validators'>\r\n<div class='col-lg-12'>\r\n<h2>validators</h2>\r\n\r\n<p>Type :  <span class='highlighted'>ValidatorFn[]</span></p>\r\n<p>It is an array of rxwebValidators. Validators are set according to the relative requirement based on which validation you want to apply. Here you have to specify the name of validator which you want to use.</p>\r\n<div component=\"app-code\" key=\"compose-validatorsExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-compose-validators\" title=\"Compose decorators with validators\" key=\"validators\"></div>\r\n</div></div>\r\n<div class='row' id= 'conditionalexpression'>\r\n<div class='col-lg-12'>\r\n<h2>conditionalExpression</h2>\r\n\r\n<p>Type :  <span class='highlighted'>Function</span>  |  <span class='highlighted'>string</span> </p>\r\n<p>Compose validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.</p>\r\n<p>If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work as same as client function.</p>\r\n<blockquote><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>Function</span> object. </p></blockquote>\r\n<div component=\"app-code\" key=\"compose-conditionalExpressionExampleFunction-model\"></div> \r\n<blockquote><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>string</span> object. </p></blockquote>\r\n<div component=\"app-code\" key=\"compose-conditionalExpressionExampleString-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-compose-conditionalExpression\" title=\"alpha decorators with conditionalExpression\" key=\"conditionalExpression\"></div>\r\n</div></div>\r\n<div class='row' id= 'completecomposeexample'>\r\n<div class='col-lg-12'>\r\n<h2>Complete Compose Example</h2>\r\n\r\n<p>This Complete Compose example which includes all the ComposeConfig properties will fulfil the requirement of scenarios 1, 2, 3 and 4.</p>\r\n<div component=\"app-tabs\" key=\"complete\"></div>\r\n</div></div>\r\n<div class='row' id= 'dynamiccomposeexample'>\r\n<div class='col-lg-12'>\r\n<h2>Dynamic Compose Example</h2>\r\n\r\n<p>This Dynamic Compose example which execute based on json passed. conditional expression with function would be not apply in dynamic compose example. </p>\r\n<p>4</p>\r\n<div component=\"app-tabs\" key=\"dynamic\"></div>\r\n</div></div>\r\n<div class=\"row\">\r\n<div class=\"col-lg-12\">\r\n<app-disqus></app-disqus>\r\n</div>\r\n</div>\r\n"}