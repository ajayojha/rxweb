{"rightSidebarLinks":[{"id":"numeric","title":"numeric (Template Driven)","subLink":null},{"id":"whentouse","title":"When to use","subLink":[]},{"id":"basicnumericvalidation","title":"Basic Numeric Validation","subLink":[]},{"id":"numericconfig","title":"NumericConfig","subLink":[{"title":"acceptValue","id":"acceptvalue"},{"title":"allowDecimal","id":"allowdecimal"},{"title":"conditionalExpression","id":"conditionalexpression"},{"title":"message","id":"message"}]},{"id":"completenumericexample","title":"Complete numeric Example","subLink":[]},{"id":"dynamicnumericexample","title":"Dynamic numeric Example","subLink":[]},{"id":"githubissues","title":"numeric Github Issues","subLink":null},{"id":"discussion","title":"Discussion","subLink":null}],"title":"numeric","description":" numeric validation decorator will check whether the value entered is a valid numberic value or not.The validation can be set according to requirement, it can be either decimal,negative number or positive number.","validatorType":"Template Driven","tabArray":{"complete":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-numeric-complete\"></div>\r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"numeric-complete-component\"></div> \r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"numeric-complete-html\"></div> \r\n"}],"dynamic":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-numeric-dynamic\"></div>\r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"numeric-dynamic-component\"></div>\r\n"},{"tabName":"Json","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"numeric-dynamic-json\"></div>\r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"numeric-dynamic-html\"></div> \r\n"}]},"innerHtml":null,"htmlContent":"<div class='row' id= 'whentouse'>\r\n<div class='col-lg-12'>\r\n<h2>When to use</h2>\r\n\r\n<p>Suppose you want to create a user form, which contains fields like DataType, integerNumber, integerNumber and you want the user to enter only numeric value depending on validation of the property. Here depending upon the requirement these scenarios may arise.</p>\r\n<ol>\r\n<li>Allow only positive numbers in integerNumber.</li>\r\n<li>Allow only Negative numbers in integerNumber.</li>\r\n<li>Allow decimal value in integerNumber  </li>\r\n<li>Apply numeric validation based on matched condition in the form, like if the dataType  is ‘Integer’ then the number value should be Integer number.</li>\r\n<li>Adding Custom Message on Negative value Field.</li>\r\n<li>Apply numeric validation dynamically based on server rules.</li>\r\n</ol>\r\n<p>Let’s see how Numeric validator fulfil the need.</p>\r\n</div></div>\r\n<div class='row' id= 'basicnumericvalidation'>\r\n<div class='col-lg-12'>\r\n<h2>Basic Numeric Validation</h2>\r\n\r\n<p>Through Angular FormBuilder service we create FormGroup in the component.</p>\r\n<p>Here we have covered Add and Edit form operations. </p>\r\n<div component=\"app-code\" key=\"numeric-add-component\"></div> \r\n<p>Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"numeric-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-numeric-add\"></div>\r\n</div></div>\r\n<div class='row' id= 'numericconfig'>\r\n<div class='col-lg-12'>\r\n<h2>NumericConfig</h2>\r\n\r\n<p>Below options are not mandatory to use in the <span class='highlighted'>@numeric()</span> decorator. If needed then use the below options.</p>\r\n<table class=\"table table-bordered table-striped\">\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr><td><a href=\"#value\" (click)='scrollTo(\"#acceptValue\")' title=\"acceptValue\">acceptValue</a></td><td> To apply validation based on checking positive or negative value or both. </td></tr>\r\n<tr><td><a href=\"#allowDecimal\" (click)='scrollTo(\"#allowDecimal\")' title=\"allowDecimal\">allowDecimal</a></td><td>This will allow decimal in particular control property.The default value is <span class='highlighted'>false</span>.</td></tr>\r\n<tr><td><a href=\"#conditionalExpression\" (click)='scrollTo(\"#conditionalExpression\")' title=\"conditionalExpression\">conditionalExpression</a></td><td>Numeric validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work as same as client function.</td></tr>\r\n<tr><td><a href=\"#message\" (click)='scrollTo(\"#message\")' title=\"message\">message</a></td><td>To override the global configuration message and show the custom message on particular control property.</td></tr>\r\n</table>\r\n</div></div>\r\n<div class='row' id= 'acceptvalue'>\r\n<div class='col-lg-12'>\r\n<h2>acceptValue</h2>\r\n\r\n<p>Type :  <span class='highlighted'>NumericValueType</span> </p>\r\n<div component=\"app-code\" key=\"numeric-acceptValueExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-numeric-acceptValue\" title=\"numeric decorators with acceptValue\" key=\"acceptValue\"></div>\r\n</div></div>\r\n<div class='row' id= 'allowdecimal'>\r\n<div class='col-lg-12'>\r\n<h2>allowDecimal</h2>\r\n\r\n<p>Type :  <span class='highlighted'>boolean</span> </p>\r\n<p>This will allow decimal in particular control property.The default value is <span class='highlighted'>false</span>.</p>\r\n<div component=\"app-code\" key=\"numeric-allowDecimalExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-numeric-allowDecimal\" title=\"numeric decorators with allowDecimal\" key=\"allowDecimal\"></div>\r\n</div></div>\r\n<div class='row' id= 'conditionalexpression'>\r\n<div class='col-lg-12'>\r\n<h2>conditionalExpression</h2>\r\n\r\n<p>Type :  <span class='highlighted'>Function</span>  |  <span class='highlighted'>string</span> </p>\r\n<p>Numeric validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.</p>\r\n<p>If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work as same as client function.</p>\r\n<blockquote><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>Function</span> object.</p></blockquote>\r\n<div component=\"app-code\" key=\"numeric-conditionalExpressionExampleFunction-model\"></div> \r\n<blockquote><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>string</span> object. </p></blockquote>\r\n<div component=\"app-code\" key=\"numeric-conditionalExpressionExampleString-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-numeric-conditionalExpression\" title=\"numeric decorators with conditionalExpression\" key=\"conditionalExpression\"></div>\r\n</div></div>\r\n<div class='row' id= 'message'>\r\n<div class='col-lg-12'>\r\n<h2>message</h2>\r\n\r\n<p>Type :  <span class='highlighted'>string</span> </p>\r\n<p>To override the global configuration message and show the custom message on particular control property.</p>\r\n<div component=\"app-code\" key=\"numeric-messageExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-numeric-message\" title=\"numeric decorators with message\" key=\"message\"></div>\r\n</div></div>\r\n<div class='row' id= 'completenumericexample'>\r\n<div class='col-lg-12'>\r\n<h2>Complete numeric Example</h2>\r\n\r\n<p>This Complete numeric example which includes all the NumericConfig properties will fulfil the requirement of scenarios 1, 2, 3, 4 and 5.</p>\r\n<div component=\"app-tabs\" key=\"complete\"></div>\r\n</div></div>\r\n<div class='row' id= 'dynamicnumericexample'>\r\n<div class='col-lg-12'>\r\n<h2>Dynamic numeric Example</h2>\r\n\r\n<p>This Dynamic numeric example which execute based on json passed. conditional expression with function would be not apply in dynamic numeric example. </p>\r\n<div component=\"app-tabs\" key=\"dynamic\"></div>\r\n</div></div>\r\n<div class=\"row\">\r\n<div class=\"col-lg-12\">\r\n<app-disqus></app-disqus>\r\n</div>\r\n</div>\r\n"}