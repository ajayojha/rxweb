{"complete":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-startsWith-complete-validator',\r\n    templateUrl: './starts-with-complete.component.html'\r\n})\r\nexport class StartsWithCompleteValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder)\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            name:['', RxwebValidators.startsWith({value:'B'  ,message:'{{0}} does not starts with `B`' })], \r\n            profession:['', RxwebValidators.startsWith({value:'Senior'  ,conditionalExpression:(x,y) => x.name == \"Bharat\"  })], \r\n            taskId:['', RxwebValidators.startsWith({value:'#'  ,conditionalExpression:'x => x.name ==\"Bharat\"' })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Name</label>\r\n      <input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' or 'Task Id', then you need to add 'name' input as 'Bharat'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.startsWith.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Profession</label>\r\n      <input type=\"text\" formControlName=\"profession\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">You can enter value which starts with 'Senior'<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' then you need to add 'name' input as 'Bharat'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.profession.errors\">{{userFormGroup.controls.profession.errors.startsWith.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Task Id</label>\r\n      <input type=\"text\" formControlName=\"taskId\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">You can enter value which starts with '#'<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Task Id' then you need to add 'name' input as 'Bharat'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.taskId.errors\">{{userFormGroup.controls.taskId.errors.startsWith.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"json":null},"valueExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.startsWith({value:'B'  ,message:'{{0}} does not starts with `B`' });\r\n","json":null},"value":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-startsWith-value-validator',\r\n    templateUrl: './starts-with-value.component.html'\r\n})\r\nexport class StartsWithValueValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder)\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            name:['', RxwebValidators.startsWith({value:'B'  ,message:'{{0}} does not starts with `B`' })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Name</label>\r\n      <input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' or 'Task Id', then you need to add 'name' input as 'Bharat'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.startsWith.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"json":null},"valueExamplemessageExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.startsWith({value:'B'  ,message:'{{0}} does not starts with `B`' });\r\n","json":null},"message":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-startsWith-message-validator',\r\n    templateUrl: './starts-with-message.component.html'\r\n})\r\nexport class StartsWithMessageValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder)\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            name:['', RxwebValidators.startsWith({value:'B'  ,message:'{{0}} does not starts with `B`' })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Name</label>\r\n      <input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' or 'Task Id', then you need to add 'name' input as 'Bharat'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.startsWith.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"json":null},"valueExampleFunction":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.startsWith({value:'Senior'  ,conditionalExpression:(x,y) => x.name == \"Bharat\"  });\r\n","json":null},"valueExampleFunctionconditionalExpressionExampleFunction":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.startsWith({value:'Senior'  ,conditionalExpression:(x,y) => x.name == \"Bharat\"  });\r\n","json":null},"conditionalExpression":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-startsWith-conditionalExpression-validator',\r\n    templateUrl: './starts-with-conditional-expression.component.html'\r\n})\r\nexport class StartsWithConditionalExpressionValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder)\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            name:['', RxwebValidators.startsWith({value:'B'  ,message:'{{0}} does not starts with `B`' })], \r\n            taskId:['', RxwebValidators.startsWith({value:'#'  ,conditionalExpression:'x => x.name ==\"Bharat\"' })], \r\n            profession:['', RxwebValidators.startsWith({value:'Senior'  ,conditionalExpression:(x,y) => x.name == \"Bharat\"  })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Name</label>\r\n      <input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' or 'Task Id', then you need to add 'name' input as 'Bharat'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.startsWith.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Task Id</label>\r\n      <input type=\"text\" formControlName=\"taskId\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">You can enter value which starts with '#'<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Task Id' then you need to add 'name' input as 'Bharat'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.taskId.errors\">{{userFormGroup.controls.taskId.errors.startsWith.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Profession</label>\r\n      <input type=\"text\" formControlName=\"profession\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">You can enter value which starts with 'Senior'<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' then you need to add 'name' input as 'Bharat'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.profession.errors\">{{userFormGroup.controls.profession.errors.startsWith.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"json":null},"valueExampleString":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.startsWith({value:'#'  ,conditionalExpression:'x => x.name ==\"Bharat\"' });\r\n","json":null},"valueExampleStringconditionalExpressionExampleString":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.startsWith({value:'#'  ,conditionalExpression:'x => x.name ==\"Bharat\"' });\r\n","json":null},"dynamic":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormBuilderConfiguration} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-startsWith-dynamic-validator',\r\n    templateUrl: './starts-with-dynamic.component.html'\r\n})\r\nexport class StartsWithDynamicValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder , private http: HttpClient )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n\t\tlet formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/validators/startsWith/dynamic/dynamic.json').subscribe(dynamic => {\r\n\t\t\tformBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tvar user = { name:'', profession:'', taskId:'',  }\r\n\t\t\tthis.userFormGroup = this.formBuilder.group(user,formBuilderConfiguration);\r\n\t\t})\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  *ngIf=\"userFormGroup\"  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Name</label>\r\n      <input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' or 'Task Id', then you need to add 'name' input as 'Bharat'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.startsWith.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Task Id</label>\r\n      <input type=\"text\" formControlName=\"taskId\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">You can enter value which starts with '#'<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Task Id' then you need to add 'name' input as 'Bharat'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.taskId.errors\">{{userFormGroup.controls.taskId.errors.startsWith.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"json":"{\"name\":{\"value\":\"'B'\",\"message\":\"'{{0}} does not starts with `B`'\"},\"taskId\":{\"value\":\"'#'\",\"conditionalExpression\":\"'x => x.name ==\\\"Bharat\\\"'\"}}"},"add":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-startsWith-add-validator',\r\n    templateUrl: './starts-with-add.component.html'\r\n})\r\nexport class StartsWithAddValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder)\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            name:['', RxwebValidators.startsWith({value:'n' })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Name</label>\r\n      <input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">You can enter value which starts with 'n'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.startsWith.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"json":null}}