{"rightSidebarLinks":[{"id":"endswith","title":"endsWith (Decorator)","subLink":null},{"id":"whentouse","title":"When to use","subLink":[]},{"id":"basicendswithvalidation","title":"Basic EndsWith Validation","subLink":[]},{"id":"defaultconfig","title":"DefaultConfig","subLink":[{"title":"value","id":"value"},{"title":"conditionalExpression","id":"conditionalexpression"},{"title":"message","id":"message"}]},{"id":"completeendswithexample","title":"Complete endsWith Example","subLink":[]},{"id":"dynamicendswithexample","title":"Dynamic endsWith Example","subLink":[]},{"id":"githubissues","title":"endsWith Github Issues","subLink":null},{"id":"discussion","title":"Discussion","subLink":null}],"title":"endsWith","description":" endsWith validation decorator allows user to enter the input which ends with particular value","validatorType":"Decorators","tabArray":{"basic-operations":[{"tabName":"Add","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"endsWith-add-component\"></div> \r\n<p>Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"endsWith-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-endsWith-add\"></div>\r\n"},{"tabName":"Edit","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"endsWith-edit-component\"></div>\r\n<p>The below code is `user-data.json` for getting data from the server </p>\r\n<div component=\"app-code\" key=\"data-json\"></div> \r\n<p>Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"endsWith-edit-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-endsWith-edit\"></div>\r\n"}],"complete":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-endsWith-complete\"></div>\r\n"},{"tabName":"Model","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"endsWith-complete-model\"></div> \r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"endsWith-complete-component\"></div> \r\n"}],"dynamic":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-endsWith-dynamic\"></div>\r\n"},{"tabName":"Model","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"endsWith-dynamic-model\"></div>\r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"endsWith-dynamic-component\"></div>\r\n"},{"tabName":"Json","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"endsWith-dynamic-json\"></div>\r\n"}]},"innerHtml":null,"htmlContent":"<div class='row' id= 'whentouse'>\r\n<div class='col-lg-12'>\r\n<h2>When to use</h2>\r\n\r\n<p>Suppose you want to create a user form, which endsWith fields like name, profession and taskId and you want the user to enter input which ends with a particular value. Here depending upon the requirement, these scenarios may arise..</p>\r\n<ol>\r\n  <li>Apply validation on name field in which you want the user to enter value which ends with ‘m’.</li>\r\n  <li>Apply endsWith validation based on matched condition in the form, like if the name is 'Adam', then the profession must ends with 'R' (Used as a string datatype).</li>\r\n  <li>Apply endsWith validation based on matched condition in the form, like if the name is 'Adam', then the taskId must ends with '1' (Used as a function).</li>\r\n  <li>Apply endsWith validation dynamically based on server rules.</li>\r\n</ol>\r\n<p>Let's see how endsWith decorator fulfil the need.</p>\r\n</div></div>\r\n<div class='row' id= 'basicendswithvalidation'>\r\n<div class='col-lg-12'>\r\n<h2>Basic EndsWith Validation</h2>\r\n\r\n<p>First we need to create a User model and define a property of name in the model to achieve the functional need of point 1.</p>\r\n<div component=\"app-code\" key=\"endsWith-add-model\"></div> \r\n<p>Through Angular FormBuilder service we create FormGroup in the component.</p>\r\n<p>Here we have covered Add and Edit form operations. </p>\r\n<div component=\"app-tabs\" key=\"basic-operations\"></div>\r\n</div></div>\r\n<div class='row' id= 'defaultconfig'>\r\n<div class='col-lg-12'>\r\n<h2>DefaultConfig</h2>\r\n\r\n<p>message and conditionalExpression are not mandatory to use in the <span class='highlighted'>@endsWith()</span> decorator. If needed then use the below options.</p>\r\n<table class=\"table table-bordered table-striped\">\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr><td><a href=\"#value\" (click)='scrollTo(\"#value\")'   title=\"value\">value</a></td><td>This is substring value.</td></tr>\r\n<tr><td><a href=\"#conditionalExpression\" (click)='scrollTo(\"#conditionalExpression\")'   title=\"conditionalExpression\">conditionalExpression</a></td><td>endsWith validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work as same as client function.</td></tr>\r\n<tr><td><a href=\"#message\" (click)='scrollTo(\"#message\")'  title=\"message\">Message</a></td><td>To override the global configuration message and show the custom message on particular control property.</td></tr>\r\n</div></div>\r\n<div class='row' id= 'value'>\r\n<div class='col-lg-12'>\r\n<h2>value</h2>\r\n\r\n<p>Type :  <span class='highlighted'>string</span> </p>\r\n<p>This is substring value.</p>\r\n<div component=\"app-code\" key=\"endsWith-valueExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-endsWith-value\" title=\"endsWith decorators with value\" key=\"value\"></div>\r\n</div></div>\r\n<div class='row' id= 'conditionalexpression'>\r\n<div class='col-lg-12'>\r\n<h2>conditionalExpression</h2>\r\n\r\n<p>Type :  <span class='highlighted'>Function</span>  |  <span class='highlighted'>string</span> </p>\r\n<p>EndsWith validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.</p>\r\n<p>If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work as same as client function.</p>\r\n<blockquote><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>Function</span> object.</p></blockquote>\r\n<div component=\"app-code\" key=\"endsWith-conditionalExpressionExampleFunction-model\"></div> \r\n<blockquote><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>string</span> object.</p></blockquote>\r\n<div component=\"app-code\" key=\"endsWith-conditionalExpressionExampleString-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-endsWith-conditionalExpression\" title=\"endsWith decorators with conditionalExpression\" key=\"conditionalExpression\"></div>\r\n</div></div>\r\n<div class='row' id= 'message'>\r\n<div class='col-lg-12'>\r\n<h2>message</h2>\r\n\r\n<p>Type :  <span class='highlighted'>string</span> </p>\r\n<p>To override the global configuration message and show the custom message on particular control property.</p>\r\n<div component=\"app-code\" key=\"endsWith-messageExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-endsWith-message\" title=\"endsWith decorators with message\" key=\"message\"></div>\r\n</div></div>\r\n<div class='row' id= 'completeendswithexample'>\r\n<div class='col-lg-12'>\r\n<h2>Complete endsWith Example</h2>\r\n\r\n<p>This Complete endsWith example which includes all the DefaultConfig properties will fulfil the requirement of scenarios 1, 2 and 3.</p>\r\n<div component=\"app-tabs\" key=\"complete\"></div>\r\n</div></div>\r\n<div class='row' id= 'dynamicendswithexample'>\r\n<div class='col-lg-12'>\r\n<h2>Dynamic endsWith Example</h2>\r\n\r\n<div component=\"app-tabs\" key=\"dynamic\"></div>\r\n</div></div>\r\n<div class=\"row\">\r\n<div class=\"col-lg-12\">\r\n<app-disqus></app-disqus>\r\n</div>\r\n</div>\r\n"}