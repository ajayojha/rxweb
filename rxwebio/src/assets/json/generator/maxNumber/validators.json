{"rightSidebarLinks":[{"id":"maxnumber","title":"maxNumber (Validator)","subLink":null},{"id":"whentouse","title":"When to use","subLink":[]},{"id":"basicmaxnumbervalidation","title":"Basic MaxNumber Validation","subLink":[]},{"id":"numberconfig","title":"NumberConfig","subLink":[{"title":"conditionalExpression","id":"conditionalexpression"},{"title":"message","id":"message"},{"title":"value","id":"value"}]},{"id":"completemaxnumberexample","title":"Complete MaxNumber Example","subLink":[]},{"id":"dynamicmaxnumberexample","title":"Dynamic MaxNumber Example","subLink":[]},{"id":"githubissues","title":"maxNumber Github Issues","subLink":null},{"id":"discussion","title":"Discussion","subLink":null}],"title":"maxNumber","description":" MaxNumber validation decorator will allow user to enter the input upto the maximum number value parameter.","validatorType":"Validators","tabArray":{"complete":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-MaxNumber-complete\"></div>\r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"maxNumber-complete-component\"></div> \r\n"}],"dynamic":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-MaxNumber-dynamic\"></div>\r\n"},{"tabName":"Json","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"maxNumber-dynamic-json\"></div>\r\n"}]},"innerHtml":null,"htmlContent":"<div class='row' id= 'whentouse'>\r\n<div class='col-lg-12'>\r\n<h2>When to use</h2>\r\n\r\n<p>Suppose you want to create a Subject-detail form, which contains fields like subjectCode, maximumMarks, PassingMarks and you want the user to enter valid  Number which does not exceed the Maximum number. Here depending upon the requirement these scenarios may arise.</p>\r\n<ol>\r\n<li>Adding field of PassingMarks without any conditional expression.</li>\r\n<li>Apply MaxNumber validation based on matched condition in the form, like if the subjectCode is ‘8CS5A’ then the maximumMarks value should be enter valid  Number which does not exceed the Maximum number .</li>\r\n<li>Adding Custom Message on PassingMarks Field.</li>\r\n<li>Adding value which you want to restrict number in the property. The maximum number is '100s'. </li>\r\n<li>Apply maxNumber validation dynamically based on server rules.</li>\r\n</ol>\r\n<p>Let’s see how maxNumber validator fulfil the need.</p>\r\n</div></div>\r\n<div class='row' id= 'basicmaxnumbervalidation'>\r\n<div class='col-lg-12'>\r\n<h2>Basic MaxNumber Validation</h2>\r\n\r\n<p>Through Angular FormBuilder service we create FormGroup in the component.</p>\r\n<p>Here we have covered Add and Edit form operations. </p>\r\n<div component=\"app-code\" key=\"maxNumber-add-component\"></div> \r\n<p>Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"maxNumber-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-MaxNumber-add\"></div>\r\n</div></div>\r\n<div class='row' id= 'numberconfig'>\r\n<div class='col-lg-12'>\r\n<h2>NumberConfig</h2>\r\n\r\n<p>message and conditional expression options are not mandatory to use in the <span class='highlighted'>@maxNumber()</span> decorator but value is mandatory. If needed then use the below options.</p>\r\n<table class=\"table table-bordered table-striped\">\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr><td><a href=\"#value\" (click)='scrollTo(\"#value\")' title=\"value\">value</a></td><td>enter value which you want to restrict number in the property</td></tr>\r\n<tr><td><a href=\"#conditionalExpression\" (click)='scrollTo(\"#conditionalExpression\")' title=\"conditionalExpression\">conditionalExpression</a></td><td>max number validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work as same as client function.</td></tr>\r\n<tr><td><a href=\"#message\" (click)='scrollTo(\"#message\")' title=\"message\">message</a></td><td>To override the global configuration message and show the custom message on particular control property.</td></tr>\r\n</table>\r\n</div></div>\r\n<div class='row' id= 'conditionalexpression'>\r\n<div class='col-lg-12'>\r\n<h2>conditionalExpression</h2>\r\n\r\n<p>Type :  <span class='highlighted'>Function</span>  |  <span class='highlighted'>string</span> </p>\r\n<p>Max Number validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.</p>\r\n<p>If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work as same as client function.</p>\r\n<blockquote><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>Function</span> object.</p></blockquote>\r\n<div component=\"app-code\" key=\"maxNumber-conditionalExpressionExampleFunction-model\"></div> \r\n<blockquote><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>string</span> object.</p></blockquote>\r\n<div component=\"app-code\" key=\"maxNumber-conditionalExpressionExampleString-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-maxNumber-conditionalExpression\" title=\"maxNumber decorators with conditionalExpression\" key=\"conditionalExpression\"></div>\r\n</div></div>\r\n<div class='row' id= 'message'>\r\n<div class='col-lg-12'>\r\n<h2>message</h2>\r\n\r\n<p>Type :  <span class='highlighted'>string</span> </p>\r\n<p>To override the global configuration message and show the custom message on particular control property. </p>\r\n<div component=\"app-code\" key=\"maxNumber-messageExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-maxNumber-message\" title=\"maxNumber decorators with message\" key=\"message\"></div>\r\n</div></div>\r\n<div class='row' id= 'value'>\r\n<div class='col-lg-12'>\r\n<h2>value</h2>\r\n\r\n<p>Type :  <span class='highlighted'>number</span> </p>\r\n<p>enter value which you want to restrict number in the property.</p>\r\n<div component=\"app-code\" key=\"maxNumber-valueExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-maxNumber-value\" title=\"maxNumber decorators with value\" key=\"value\"></div>\r\n</div></div>\r\n<div class='row' id= 'completemaxnumberexample'>\r\n<div class='col-lg-12'>\r\n<h2>Complete MaxNumber Example</h2>\r\n\r\n<p>This Complete MaxNumber example which includes all the NumberConfig properties will fulfil the requirement of scenarios 1, 2, 3 and 4.</p>\r\n<div component=\"app-tabs\" key=\"complete\"></div>\r\n</div></div>\r\n<div class='row' id= 'dynamicmaxnumberexample'>\r\n<div class='col-lg-12'>\r\n<h2>Dynamic MaxNumber Example</h2>\r\n\r\n<div component=\"app-tabs\" key=\"dynamic\"></div>\r\n</div></div>\r\n<div class=\"row\">\r\n<div class=\"col-lg-12\">\r\n<app-disqus></app-disqus>\r\n</div>\r\n</div>\r\n"}