{"rightSidebarLinks":[{"id":"maxlength","title":"maxLength (Validator)","subLink":null},{"id":"whentouse","title":"When to use","subLink":[]},{"id":"basicmaxlengthvalidation","title":"Basic MaxLength Validation","subLink":[]},{"id":"numberconfig","title":"NumberConfig","subLink":[{"title":"conditionalExpression","id":"conditionalexpression"},{"title":"value","id":"value"}]},{"id":"completemaxlengthexample","title":"Complete maxLength Example","subLink":[]},{"id":"dynamicmaxlengthexample","title":"Dynamic maxLength Example","subLink":[]},{"id":"githubissues","title":"maxLength Github Issues","subLink":null},{"id":"discussion","title":"Discussion","subLink":null}],"title":"maxLength","description":" MaxLength validation decorator will allow user to enter the input upto the maximum length value parameter.","validatorType":"Validators","tabArray":{"complete":[{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"maxLength-complete-component\"></div> \r\n"}],"dynamic":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-maxLength-dynamic\"></div>\r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"maxLength-dynamic-component\"></div>\r\n"},{"tabName":"Json","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"maxLength-dynamic-json\"></div>\r\n"}]},"innerHtml":null,"htmlContent":"<div class='row' id= 'whentouse'>\r\n<div class='col-lg-12'>\r\n<h2>When to use</h2>\r\n\r\n<p>Suppose you want to create a User form, which contains fields like FirstName, LastName, Username and you want the user to enter any string which should not exceed maximum length. Here depending upon the requirement these scenarios may arise.</p>\r\n<ol>\r\n\t<li>Allow string less than 16 characters in FirstName.</li>\r\n\t<li>Apply maxLength validation based on matched condition in the form, like if the FirstName is <span class='highlighted'>john</span>, then only the maxLength validation will be  applied to LastName field.</li> \r\n\t<li>Adding Custom Message on Username Field.</li>\r\n \t<li>Apply maxLength validation dynamically based on server rules.</li>\r\n</ol>\r\n<p>Letâ€™s see how maxLength validator fulfil the need.</p>\r\n</div></div>\r\n<div class='row' id= 'basicmaxlengthvalidation'>\r\n<div class='col-lg-12'>\r\n<h2>Basic MaxLength Validation</h2>\r\n\r\n<p>Through Angular FormBuilder service we create FormGroup in the component.</p>\r\n<p>Here we have covered Add and Edit form operations. </p>\r\n<div component=\"app-code\" key=\"maxLength-add-component\"></div> \r\n<p>Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"maxLength-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-maxLength-add\"></div>\r\n</div></div>\r\n<div class='row' id= 'numberconfig'>\r\n<div class='col-lg-12'>\r\n<h2>NumberConfig</h2>\r\n\r\n<p>message and conditional expression options are not mandatory to use in the <span class='highlighted'>@maxLength()</span> decorator but value is mandatory. If needed then use the below options.</p>\r\n<table class=\"table table-bordered table-striped\">\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr><td><a href=\"#conditionalExpression\"  (click)='scrollTo(\"#conditionalExpression\")' title=\"conditionalExpression\">conditionalExpression</a></td><td>longitude validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work as same as client function.</td></tr>\r\n<tr><td><a href=\"#message\"  (click)='scrollTo(\"#message\")' title=\"message\">Message</a></td><td>To override the global configuration message and show the custom message on particular control property.</td></tr>\r\n<tr><td><a href=\"#value\"  (click)='scrollTo(\"#value\")' title=\"value\">value</a></td> enter value which you want to restrict string length in the property.</td></tr>\r\n</div></div>\r\n<div class='row' id= 'conditionalexpression'>\r\n<div class='col-lg-12'>\r\n<h2>conditionalExpression</h2>\r\n\r\n<p>Type :  <span class='highlighted'>Function</span>  |  <span class='highlighted'>string</span> </p>\r\n<p>MaxLength validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.</p>\r\n<p>If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work as same as client function.</p>\r\n<blockquote><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>Function</span> object.</p></blockquote>\r\n<div component=\"app-code\" key=\"maxLength-conditionalExpressionExampleFunction-model\"></div> \r\n<blockquote><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>string</span> object.</p></blockquote>\r\n<div component=\"app-code\" key=\"maxLength-conditionalExpressionExampleString-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-maxLength-conditionalExpression\" title=\"maxLength decorators with conditionalExpression\" key=\"conditionalExpression\"></div>\r\n<p> ## message </p>\r\n<p>Type :  <span class='highlighted'>string</span> </p>\r\n<p>To override the global configuration message and show the custom message on particular control property.</p>\r\n<div component=\"app-code\" key=\"maxLength-messageExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-maxLength-message\" title=\"maxLength decorators with message\" key=\"message\"></div>\r\n</div></div>\r\n<div class='row' id= 'value'>\r\n<div class='col-lg-12'>\r\n<h2>value</h2>\r\n\r\n<p>Type :  <span class='highlighted'>number</span> </p>\r\n<p>enter value which you want to restrict string length in the property</p>\r\n<div component=\"app-code\" key=\"maxLength-valueExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"maxLength-value-value\" title=\"maxLength decorators with value\" key=\"value\"></div>\r\n</div></div>\r\n<div class='row' id= 'completemaxlengthexample'>\r\n<div class='col-lg-12'>\r\n<h2>Complete maxLength Example</h2>\r\n\r\n<p>This Complete maxLength example which includes all the NumberConfig properties will fulfil the requirement of scenarios 1, 2, 3.</p>\r\n<div component=\"app-tabs\" key=\"complete\"></div>\r\n</div></div>\r\n<div class='row' id= 'dynamicmaxlengthexample'>\r\n<div class='col-lg-12'>\r\n<h2>Dynamic maxLength Example</h2>\r\n\r\n<div component=\"app-tabs\" key=\"dynamic\"></div>\r\n</div></div>\r\n<div class=\"row\">\r\n<div class=\"col-lg-12\">\r\n<app-disqus></app-disqus>\r\n</div>\r\n</div>\r\n"}