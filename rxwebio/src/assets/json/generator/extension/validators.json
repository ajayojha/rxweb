{"rightSidebarLinks":[{"id":"extension","title":"extension (Validator)","subLink":null},{"id":"whentouse","title":"When to use","subLink":[]},{"id":"basicextensionvalidation","title":"Basic extension Validation","subLink":[]},{"id":"extensionconfig","title":"ExtensionConfig","subLink":[{"title":"extensions","id":"extensions"},{"title":"conditionalExpression","id":"conditionalexpression"},{"title":"message","id":"message"}]},{"id":"completeextensionexample","title":"Complete extension Example","subLink":[]},{"id":"dynamicextensionexample","title":"Dynamic extension Example","subLink":[]},{"id":"githubissues","title":"extension Github Issues","subLink":null},{"id":"discussion","title":"Discussion","subLink":null}],"title":"extension","description":" extension validation decorator allows user to enter the input which is in the proper extension format.","validatorType":"Validators","tabArray":{"complete":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-extension-complete\"></div>\r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"extension-complete-component\"></div> \r\n"}],"dynamic":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-extension-dynamic\"></div>\r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"extension-dynamic-component\"></div>\r\n"},{"tabName":"Json","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"extension-dynamic-json\"></div>\r\n"}]},"innerHtml":null,"htmlContent":"<div class='row' id= 'whentouse'>\r\n<div class='col-lg-12'>\r\n<h2>When to use</h2>\r\n\r\n<p>Suppose you want to create a storageCapacity form, which contains fields like device, videoFileExtension, documentFileExtension and photographFileExtension and you want the user to enter input which is a proper extension format. Here depending upon the requirement, these scenarios may arise..</p>\r\n<ol>\r\n   <li>Allow videoFileExtension which have proper extension format and adding Custom Message on videoFileExtension.</li>\r\n   <li>Apply  extension validation on  documentFileExtension field based on matched condition in the form, like if the device is 'SmartPhone', then the documentFileExtension must be a extension format (Used as a function).</li>\r\n   <li>Apply extension validation on photographFileExtension field based on matched condition in the form, like if the device is 'SmartPhone', then the photographFileExtension must be a extension format (Used as a string datatype).</li>\r\n   <li>Apply extension validation dynamically based on server rules.</li>\r\n</ol>\r\n<p>Let's see how extension decorator fulfil the need.</p>\r\n</div></div>\r\n<div class='row' id= 'basicextensionvalidation'>\r\n<div class='col-lg-12'>\r\n<h2>Basic extension Validation</h2>\r\n\r\n<p>Through Angular FormBuilder service we create FormGroup in the component.</p>\r\n<p>Here we have covered Add and Edit form operations. </p>\r\n<div component=\"app-code\" key=\"extension-add-component\"></div> \r\n<p>Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"extension-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-extension-add\"></div>\r\n</div></div>\r\n<div class='row' id= 'extensionconfig'>\r\n<div class='col-lg-12'>\r\n<h2>ExtensionConfig</h2>\r\n\r\n<p>message and conditionalExpression are not mandatory to use in the <span class='highlighted'>@extension()</span> decorator. If needed then use the below options.</p>\r\n<table class=\"table table-bordered table-striped\">\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr><td><a href=\"#extensions\" (click)='scrollTo(\"#extensions\")'  title=\"extensions\">extensions</a></td><td>Multiple extensions which are allowed to be entered by the user. It is in form of array.</td></tr>\r\n<tr><td><a href=\"#conditionalExpression\" (click)='scrollTo(\"#conditionalExpression\")'  title=\"conditionalExpression\">conditionalExpression</a></td><td>extension validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work as same as client function.</td></tr>\r\n<tr><td><a href=\"#message\" (click)='scrollTo(\"#message\")'  title=\"message\">Message</a></td><td>To override the global configuration message and show the custom message on particular control property.</td></tr>\r\n</div></div>\r\n<div class='row' id= 'extensions'>\r\n<div class='col-lg-12'>\r\n<h2>extensions</h2>\r\n\r\n<p>Type :  <span class='highlighted'>string[]</span> </p>\r\n<p>extensions parameter is the array of multiple extensions which are allowed to be entered by the user.</p>\r\n<div component=\"app-code\" key=\"extension-extensionsExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-extension-extensions\" title=\"extension decorators with extensions\" key=\"extensions\"></div>\r\n</div></div>\r\n<div class='row' id= 'conditionalexpression'>\r\n<div class='col-lg-12'>\r\n<h2>conditionalExpression</h2>\r\n\r\n<p>Type :  <span class='highlighted'>Function</span>  |  <span class='highlighted'>string</span> </p>\r\n<p>extension validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.</p>\r\n<p>If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work as same as client function.</p>\r\n<blockquote><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>Function</span> object.</p></blockquote>\r\n<div component=\"app-code\" key=\"extension-conditionalExpressionExampleFunction-model\"></div> \r\n<blockquote><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>string</span> object.</p></blockquote>\r\n<div component=\"app-code\" key=\"extension-conditionalExpressionExampleString-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-extension-conditionalExpression\" title=\"extension decorators with conditionalExpression\" key=\"conditionalExpression\"></div>\r\n</div></div>\r\n<div class='row' id= 'message'>\r\n<div class='col-lg-12'>\r\n<h2>message</h2>\r\n\r\n<p>Type :  <span class='highlighted'>string</span> </p>\r\n<p>To override the global configuration message and show the custom message on particular control property.</p>\r\n<div component=\"app-code\" key=\"extension-messageExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-extension-message\" title=\"extension decorators with message\" key=\"message\"></div>\r\n</div></div>\r\n<div class='row' id= 'completeextensionexample'>\r\n<div class='col-lg-12'>\r\n<h2>Complete extension Example</h2>\r\n\r\n<p>This Complete extension example which includes all the ExtensionConfig properties will fulfil the requirement of scenarios 1, 2 and 3.</p>\r\n<div component=\"app-tabs\" key=\"complete\"></div>\r\n</div></div>\r\n<div class='row' id= 'dynamicextensionexample'>\r\n<div class='col-lg-12'>\r\n<h2>Dynamic extension Example</h2>\r\n\r\n<div component=\"app-tabs\" key=\"dynamic\"></div>\r\n</div></div>\r\n<div class=\"row\">\r\n<div class=\"col-lg-12\">\r\n<app-disqus></app-disqus>\r\n</div>\r\n</div>\r\n"}