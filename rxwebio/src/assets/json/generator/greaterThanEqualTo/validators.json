{"rightSidebarLinks":[{"id":"greaterthanequalto","title":"greaterThanEqualTo (Validator)","subLink":null},{"id":"whentouse","title":"When to use","subLink":[]},{"id":"basicgreaterthanequaltovalidation","title":"Basic GreaterThanEqualTo Validation","subLink":[]},{"id":"relationaloperatorconfig","title":"RelationalOperatorConfig","subLink":[{"title":"fieldName","id":"fieldname"},{"title":"conditionalExpression","id":"conditionalexpression"},{"title":"message","id":"message"}]},{"id":"completegreaterthanequaltoexample","title":"Complete greaterThanEqualTo Example","subLink":[]},{"id":"dynamicgreaterthanequaltoexample","title":"Dynamic greaterThanEqualTo Example","subLink":[]},{"id":"githubissues","title":"greaterThanEqualTo Github Issues","subLink":null},{"id":"discussion","title":"Discussion","subLink":null}],"title":"greaterThanEqualTo","description":" Greater than equal to validation decorator will check that input property is greater than or equal to the related field input.","validatorType":"Validators","tabArray":{"complete":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-greaterThanEqualTo-complete\"></div>\r\n"}],"dynamic":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-greaterThanEqualTo-dynamic\"></div>\r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"greaterThanEqualTo-dynamic-component\"></div>\r\n"},{"tabName":"Json","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"greaterThanEqualTo-dynamic-json\"></div>\r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"greaterThanEqualTo-dynamic-html\"></div> \r\n"}]},"innerHtml":null,"htmlContent":"<div class='row' id= 'whentouse'>\r\n<div class='col-lg-12'>\r\n<h2>When to use</h2>\r\n\r\n<p>Suppose you want to create a user form and you have fields like Age, VoterAge, OtherAge and you want user to enter Age such that VoterAge,OtherAge should be greater than or equal to Age Here depending upon the requirement these scenarios may arise.</p>\r\n<ol>\r\n<li>Specify Age as fieldName such that greaterThanEqualTo validation should be applied to the fieldname for comparing other fields.</li>\r\n<li>Apply greaterThanEqualTo validation based on matched condition in the form, like if the Age is ‘18’ then the </li>VoterAge,OtherAge value should be Greater than or equal to 18.\r\n<li>Adding Custom Message on OtherAge Field.</li>\r\n<li>Apply greaterThanEqualTo validation dynamically based on server rules.</li>\r\n<p>Let’s see how greaterThanEqualTo decorator fulfil the need.</p>\r\n</div></div>\r\n<div class='row' id= 'basicgreaterthanequaltovalidation'>\r\n<div class='col-lg-12'>\r\n<h2>Basic GreaterThanEqualTo Validation</h2>\r\n\r\n<p>Through Angular FormBuilder service we create FormGroup in the component.</p>\r\n<p>Here we have covered Add and Edit form operations. </p>\r\n<div component=\"app-code\" key=\"greaterThanEqualTo-add-component\"></div> \r\n<p>Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"greaterThanEqualTo-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-greaterThanEqualTo-add\"></div>\r\n</div></div>\r\n<div class='row' id= 'relationaloperatorconfig'>\r\n<div class='col-lg-12'>\r\n<h2>RelationalOperatorConfig</h2>\r\n\r\n<p>Below options are not mandatory to use in the <span class='highlighted'>@greaterThanEqualTo()</span> decorator. If needed then use the below options.</p>\r\n<table class=\"table table-bordered table-striped\">\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr><td><a href=\"#fieldName\" title=\"fieldName\">fieldName</a></td><td>Greater than Equal to validation should be applied based on the <span class='highlighted'>fieldName</span> for compare other field value</td></tr>\r\n<tr><td><a href=\"#conditionalExpression\" title=\"conditionalExpression\">conditionalExpression</a></td><td>GreaterThanEqualTo validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work as same as client function.</td></tr>\r\n<tr><td><a href=\"#message\" title=\"message\">message</a></td><td>To override the global configuration message and show the custom message on particular control property.</td></tr>\r\n</table>\r\n</div></div>\r\n<div class='row' id= 'fieldname'>\r\n<div class='col-lg-12'>\r\n<h2>fieldName</h2>\r\n\r\n<p>Type :  <span class='highlighted'>string</span> </p>\r\n<p>Greater than Equal to validation should be applied based on the <span class='highlighted'>fieldName</span> for compare other field value </p>\r\n<div component=\"app-code\" key=\"greaterThanEqualTo-fieldNameExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-greaterThanEqualTo-fieldName\" title=\"greaterThanEqualTo decorators with fieldName\" key=\"fieldName\"></div>\r\n</div></div>\r\n<div class='row' id= 'conditionalexpression'>\r\n<div class='col-lg-12'>\r\n<h2>conditionalExpression</h2>\r\n\r\n<p>Type :  <span class='highlighted'>Function</span>  |  <span class='highlighted'>string</span> </p>\r\n<p>Greater than Equal to validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.</p>\r\n<p>If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work as same as client function.</p>\r\n<blockquote><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>Function</span> object.</p></blockquote>\r\n<div component=\"app-code\" key=\"greaterThanEqualTo-conditionalExpressionExampleFunction-model\"></div> \r\n<blockquote><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>string</span> object.</p></blockquote>\r\n<div component=\"app-code\" key=\"greaterThanEqualTo-conditionalExpressionExampleString-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-greaterThanEqualTo-conditionalExpression\" title=\"alpha decorators with conditionalExpression\" key=\"conditionalExpression\"></div>\r\n</div></div>\r\n<div class='row' id= 'message'>\r\n<div class='col-lg-12'>\r\n<h2>message</h2>\r\n\r\n<p>Type :  <span class='highlighted'>string</span></p>\r\n<p>To override the global configuration message and show the custom message on particular control property. </p>\r\n<div component=\"app-code\" key=\"greaterThanEqualTo-messageExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-greaterThanEqualTo-message\" title=\"alpha decorators with message\" key=\"message\"></div>\r\n</div></div>\r\n<div class='row' id= 'completegreaterthanequaltoexample'>\r\n<div class='col-lg-12'>\r\n<h2>Complete greaterThanEqualTo Example</h2>\r\n\r\n<p>This Complete greaterThanEqualTo example which includes all the RelationalOperatorConfig properties will fulfil the requirement of scenarios 1, 2, and 3</p>\r\n<div component=\"app-tabs\" key=\"complete\"></div>\r\n</div></div>\r\n<div class='row' id= 'dynamicgreaterthanequaltoexample'>\r\n<div class='col-lg-12'>\r\n<h2>Dynamic greaterThanEqualTo Example</h2>\r\n\r\n<div component=\"app-tabs\" key=\"dynamic\"></div>\r\n</div></div>\r\n<div class=\"row\">\r\n<div class=\"col-lg-12\">\r\n<app-disqus></app-disqus>\r\n</div>\r\n</div>\r\n"}