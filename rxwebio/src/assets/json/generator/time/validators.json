{"rightSidebarLinks":[{"id":"time","title":"time (Validator)","subLink":null},{"id":"whentouse","title":"When to use","subLink":[]},{"id":"basictime","title":"Basic time","subLink":[]},{"id":"timeconfig","title":"TimeConfig","subLink":[{"title":"conditionalExpression","id":"conditionalexpression"},{"title":"allowSeconds","id":"allowseconds"},{"title":"message","id":"message"}]},{"id":"completetimeexample","title":"Complete time Example","subLink":[]},{"id":"dynamictimeexample","title":"Dynamic time Example","subLink":[]},{"id":"githubissues","title":"time Github Issues","subLink":null},{"id":"discussion","title":"Discussion","subLink":null}],"title":"time","description":" time validation decorator will allow user to enter the input only in the correct time format.","validatorType":"Validators","tabArray":{"complete":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-time-complete\"></div>\r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"time-complete-component\"></div> \r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"time-complete-html\"></div> \r\n"}],"dynamic":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-time-dynamic\"></div>\r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"time-dynamic-component\"></div>\r\n"},{"tabName":"Json","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"time-dynamic-json\"></div>\r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"time-dynamic-html\"></div> \r\n"}]},"innerHtml":null,"htmlContent":"<div class='row' id= 'whentouse'>\r\n<div class='col-lg-12'>\r\n<h2>When to use</h2>\r\n\r\n<p>Suppose you want to create a AttendanceDetail form, which contains field of EntryPlace, EntryTime, TotalTimeOut and Exit Time you want the user to enter valid time. Here depending upon the requirement these scenarios may arise.</p>\r\n<ol>\r\n<li>Allow time in EntryTime without seconds.</li>\r\n<li>Allowing seconds in TotalTimeOut.</li>\r\n<li>Apply time validation based on matched condition in the form, like if the EntryPlace is ‘Lunch room’ then the EntryTime value should be in proper format of time .</li>\r\n<li>Adding Custom Message on exitTime Field.</li>\r\n<li>Apply time validation dynamically based on server rules.</li>\r\n</ol>\r\n<p>Let’s see how time validator fulfil the need.</p>\r\n</div></div>\r\n<div class='row' id= 'basictime'>\r\n<div class='col-lg-12'>\r\n<h2>Basic time</h2>\r\n\r\n<p>Through Angular FormBuilder service we create FormGroup in the component.</p>\r\n<p>Here we have covered Add and Edit form operations. </p>\r\n<div component=\"app-code\" key=\"time-add-component\"></div> \r\n<p>Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"time-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-time-add\"></div>\r\n</div></div>\r\n<div class='row' id= 'timeconfig'>\r\n<div class='col-lg-12'>\r\n<h2>TimeConfig</h2>\r\n\r\n<p>Below options are not mandatory to use in the <span class='highlighted'>@time()</span> decorator. If needed then use the below options.</p>\r\n<table class=\"table table-bordered table-striped\">\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr><td><a href=\"#conditionalExpression\" (click)='scrollTo(\"#conditionalExpression\")' title=\"conditionalExpression\">conditionalExpression</a></td><td>Time validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work as same as client function.</td></tr>\r\n<tr><td><a href=\"#message\" (click)='scrollTo(\"#message\")' title=\"message\">message</a></td><td>To override the global configuration message and show the custom message on particular control property.</td></tr>\r\n<tr><td><a href=\"#allowseconds\" (click)='scrollTo(\"#allowseconds\")' title=\"allowseconds\">allowseconds</a></td><td>If you are allowed seconds in time format then you need to put this as true.</td></tr>\r\n</div></div>\r\n<div class='row' id= 'conditionalexpression'>\r\n<div class='col-lg-12'>\r\n<h2>conditionalExpression</h2>\r\n\r\n<p>Type :  <span class='highlighted'>Function</span>  |  <span class='highlighted'>string</span> </p>\r\n<p>time validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.</p>\r\n<p>If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work as same as client function.</p>\r\n<blockquote><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>Function</span> object.</p></blockquote>\r\n<div component=\"app-code\" key=\"time-conditionalExpressionExampleFunction-model\"></div> \r\n<blockquote><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>string</span> object.</p></blockquote>\r\n<div component=\"app-code\" key=\"time-conditionalExpressionExampleString-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-time-conditionalExpression\" title=\"time decorators with conditionalExpression\" key=\"conditionalExpression\"></div>\r\n</div></div>\r\n<div class='row' id= 'allowseconds'>\r\n<div class='col-lg-12'>\r\n<h2>allowSeconds</h2>\r\n\r\n<p>Type :  <span class='highlighted'>boolean</span> </p>\r\n<p>If you are allowed seconds in time format then you need to put this as true.</p>\r\n<div component=\"app-code\" key=\"time-messageExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-time-message\" title=\"time decorators with message\" key=\"message\"></div>\r\n</div></div>\r\n<div class='row' id= 'message'>\r\n<div class='col-lg-12'>\r\n<h2>message</h2>\r\n\r\n<p>Type :  <span class='highlighted'>string</span> </p>\r\n<p>To override the global configuration message and show the custom message on particular control property.</p>\r\n<div component=\"app-code\" key=\"time-messageExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-time-message\" title=\"time decorators with message\" key=\"message\"></div>\r\n</div></div>\r\n<div class='row' id= 'completetimeexample'>\r\n<div class='col-lg-12'>\r\n<h2>Complete time Example</h2>\r\n\r\n<p>This Complete time example which includes all the TimeConfig properties will fulfil the requirement of scenarios 1, 2 and 3.</p>\r\n<div component=\"app-tabs\" key=\"complete\"></div>\r\n</div></div>\r\n<div class='row' id= 'dynamictimeexample'>\r\n<div class='col-lg-12'>\r\n<h2>Dynamic time Example</h2>\r\n\r\n<p>This Dynamic time example which execute based on json passed. conditional expression with function would be not apply in dynamic time example. </p>\r\n<div component=\"app-tabs\" key=\"dynamic\"></div>\r\n</div></div>\r\n<div class=\"row\">\r\n<div class=\"col-lg-12\">\r\n<app-disqus></app-disqus>\r\n</div>\r\n</div>\r\n"}