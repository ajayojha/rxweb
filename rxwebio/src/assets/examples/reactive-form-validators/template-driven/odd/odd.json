{"complete":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-odd-complete-template-driven',\r\n    templateUrl: './odd-complete.component.html'\r\n})\r\nexport class OddCompleteTemplateDrivenComponent implements OnInit {\r\n    user: User\r\n\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form #userForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Type</label>\r\n      <input type=\"text\" name=\"type\" [(ngModel)]=\"user.type\"  class=\"form-control\"  odd />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' or 'Odd Number', then you need to add 'Type' input as 'Odd'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.type?.errors\">{{userForm.controls.type?.errors.odd.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Number</label>\r\n      <input type=\"text\" name=\"number\" [(ngModel)]=\"user.number\"  class=\"form-control\"  [odd]=\"{'conditionalExpression':(x,y) => x.type == 'Odd' }\" />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' then you need to add 'Type' input as 'Odd'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.number?.errors\">{{userForm.controls.number?.errors.odd.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Odd Number</label>\r\n      <input type=\"text\" name=\"oddNumber\" [(ngModel)]=\"user.oddNumber\"  class=\"form-control\"  [odd]=\"{'conditionalExpression':'x => x.type == 'Odd''}\" />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Odd Number' then you need to add 'Type' input as 'Odd'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.oddNumber?.errors\">{{userForm.controls.oddNumber?.errors.odd.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Multiples of Odd Number</label>\r\n      <input type=\"text\" name=\"multiplesOfOddNumber\" [(ngModel)]=\"user.multiplesOfOddNumber\"  class=\"form-control\"  [odd]=\"{'message':'{{0}} is not an odd number'}\" />\r\n      <small class=\"form-text text-muted\">you can enter only an odd number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.multiplesOfOddNumber?.errors\">{{userForm.controls.multiplesOfOddNumber?.errors.odd.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  odd,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\ttype: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\tnumber: number;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\toddNumber: number;\r\n\r\n\tmultiplesOfOddNumber: number;\r\n\r\n}\r\n","Json":null},"conditionalExpression":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-odd-conditionalExpression-template-driven',\r\n    templateUrl: './odd-conditional-expression.component.html'\r\n})\r\nexport class OddConditionalExpressionTemplateDrivenComponent implements OnInit {\r\n    user: User\r\n\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form #userForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Type</label>\r\n      <input type=\"text\" name=\"type\" [(ngModel)]=\"user.type\"  class=\"form-control\"  odd />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' or 'Odd Number', then you need to add 'Type' input as 'Odd'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.type?.errors\">{{userForm.controls.type?.errors.odd.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Odd Number</label>\r\n      <input type=\"text\" name=\"oddNumber\" [(ngModel)]=\"user.oddNumber\"  class=\"form-control\"  [odd]=\"{'conditionalExpression':'x => x.type == 'Odd''}\" />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Odd Number' then you need to add 'Type' input as 'Odd'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.oddNumber?.errors\">{{userForm.controls.oddNumber?.errors.odd.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Number</label>\r\n      <input type=\"text\" name=\"number\" [(ngModel)]=\"user.number\"  class=\"form-control\"  [odd]=\"{'conditionalExpression':(x,y) => x.type == 'Odd' }\" />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' then you need to add 'Type' input as 'Odd'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.number?.errors\">{{userForm.controls.number?.errors.odd.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  odd,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\ttype: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\toddNumber: number;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\tnumber: number;\r\n\r\n}\r\n","Json":null},"message":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-odd-message-template-driven',\r\n    templateUrl: './odd-message.component.html'\r\n})\r\nexport class OddMessageTemplateDrivenComponent implements OnInit {\r\n    user: User\r\n\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form #userForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Multiples of Odd Number</label>\r\n      <input type=\"text\" name=\"multiplesOfOddNumber\" [(ngModel)]=\"user.multiplesOfOddNumber\"  class=\"form-control\"  [odd]=\"{'message':'{{0}} is not an odd number'}\" />\r\n      <small class=\"form-text text-muted\">you can enter only an odd number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.multiplesOfOddNumber?.errors\">{{userForm.controls.multiplesOfOddNumber?.errors.odd.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  odd,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\tmultiplesOfOddNumber: number;\r\n\r\n}\r\n","Json":null},"add":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-odd-add-template-driven',\r\n    templateUrl: './odd-add.component.html'\r\n})\r\nexport class OddAddTemplateDrivenComponent implements OnInit {\r\n    user: User\r\n\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form #userForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Odd Number</label>\r\n      <input type=\"text\" name=\"oddNumber\" [(ngModel)]=\"user.oddNumber\"  class=\"form-control\"  odd />\r\n      <small class=\"form-text text-muted\">you can enter only an odd number<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.oddNumber?.errors\">{{userForm.controls.oddNumber?.errors.odd.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  odd,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\toddNumber: number;\r\n\r\n}\r\n","Json":null}}