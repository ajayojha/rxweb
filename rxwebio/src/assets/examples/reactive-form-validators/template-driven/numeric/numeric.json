{"complete":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numeric-complete-template-driven',\r\n    templateUrl: './numeric-complete.component.html'\r\n})\r\nexport class NumericCompleteTemplateDrivenComponent implements OnInit {\r\n    userinfo: UserInfo\r\n\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.userinfo= new UserInfo()\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form #userinfoForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Data Type</label>\r\n      <select name=\"dataType\" [(ngModel)]=\"userinfo.dataType\"  class=\"form-control\" numeric>\r\n\t\t<option [value]=\"item\" *ngFor=\"let item of dataTypes\">{{item}}</option>\r\n      </select>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls.dataType?.errors\">{{userinfoForm.controls.dataType?.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Negative Number</label>\r\n      <input type=\"text\" name=\"negativeNumber\" [(ngModel)]=\"userinfo.negativeNumber\"  class=\"form-control\"  [numeric]=\"{'acceptValue':NumericValueType.NegativeNumber,'message':'{{0}} is not a negative number'}\" />\r\n      <small class=\"form-text text-muted\">you can enter only a negative number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls.negativeNumber?.errors\">{{userinfoForm.controls.negativeNumber?.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Decimal Number</label>\r\n      <input type=\"text\" name=\"decimalNumber\" [(ngModel)]=\"userinfo.decimalNumber\"  class=\"form-control\"  [numeric]=\"{'allowDecimal':true,'message':'{{0}} is not a decimal number'}\" />\r\n      <small class=\"form-text text-muted\">you can enter only a decimal number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls.decimalNumber?.errors\">{{userinfoForm.controls.decimalNumber?.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Integer Number</label>\r\n      <input type=\"text\" name=\"integerNumber\" [(ngModel)]=\"userinfo.integerNumber\"  class=\"form-control\"  [numeric]=\"{'acceptValue':NumericValueType.PositiveNumber,'conditionalExpression':(x,y) => x.dataType == 'Positive' }\" />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Integer Number' then you need to add 'Data Type' input as 'Positive'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls.integerNumber?.errors\">{{userinfoForm.controls.integerNumber?.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Real Number</label>\r\n      <input type=\"text\" name=\"realNumber\" [(ngModel)]=\"userinfo.realNumber\"  class=\"form-control\"  [numeric]=\"{'acceptValue':NumericValueType.Both,'conditionalExpression':'x => x.dataType == 'Real''}\" />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Real Number' then you need to add 'Data Type' input as 'Real'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls.realNumber?.errors\">{{userinfoForm.controls.realNumber?.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userinfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  numeric,prop, NumericValueType, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class UserInfo {\r\n\r\n\tdataType: string;\r\n\r\n\tnegativeNumber: number;\r\n\r\n\tdecimalNumber: number;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\tintegerNumber: number;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\trealNumber: number;\r\n\r\n}\r\n","Json":null},"acceptValue":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numeric-acceptValue-template-driven',\r\n    templateUrl: './numeric-accept-value.component.html'\r\n})\r\nexport class NumericAcceptValueTemplateDrivenComponent implements OnInit {\r\n    userinfo: UserInfo\r\n\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.userinfo= new UserInfo()\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form #userinfoForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Negative Number</label>\r\n      <input type=\"text\" name=\"negativeNumber\" [(ngModel)]=\"userinfo.negativeNumber\"  class=\"form-control\"  [numeric]=\"{'acceptValue':NumericValueType.NegativeNumber,'message':'{{0}} is not a negative number'}\" />\r\n      <small class=\"form-text text-muted\">you can enter only a negative number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls.negativeNumber?.errors\">{{userinfoForm.controls.negativeNumber?.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userinfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  numeric,prop, NumericValueType, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class UserInfo {\r\n\r\n\tnegativeNumber: number;\r\n\r\n}\r\n","Json":null},"message":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numeric-message-template-driven',\r\n    templateUrl: './numeric-message.component.html'\r\n})\r\nexport class NumericMessageTemplateDrivenComponent implements OnInit {\r\n    userinfo: UserInfo\r\n\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.userinfo= new UserInfo()\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form #userinfoForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Negative Number</label>\r\n      <input type=\"text\" name=\"negativeNumber\" [(ngModel)]=\"userinfo.negativeNumber\"  class=\"form-control\"  [numeric]=\"{'acceptValue':NumericValueType.NegativeNumber,'message':'{{0}} is not a negative number'}\" />\r\n      <small class=\"form-text text-muted\">you can enter only a negative number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls.negativeNumber?.errors\">{{userinfoForm.controls.negativeNumber?.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userinfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  numeric,prop, NumericValueType, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class UserInfo {\r\n\r\n\tnegativeNumber: number;\r\n\r\n}\r\n","Json":null},"allowDecimal":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numeric-allowDecimal-template-driven',\r\n    templateUrl: './numeric-allow-decimal.component.html'\r\n})\r\nexport class NumericAllowDecimalTemplateDrivenComponent implements OnInit {\r\n    userinfo: UserInfo\r\n\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.userinfo= new UserInfo()\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form #userinfoForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Decimal Number</label>\r\n      <input type=\"text\" name=\"decimalNumber\" [(ngModel)]=\"userinfo.decimalNumber\"  class=\"form-control\"  [numeric]=\"{'allowDecimal':true,'message':'{{0}} is not a decimal number'}\" />\r\n      <small class=\"form-text text-muted\">you can enter only a decimal number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls.decimalNumber?.errors\">{{userinfoForm.controls.decimalNumber?.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userinfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  numeric,prop, NumericValueType, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class UserInfo {\r\n\r\n\tdecimalNumber: number;\r\n\r\n}\r\n","Json":null},"conditionalExpression":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numeric-conditionalExpression-template-driven',\r\n    templateUrl: './numeric-conditional-expression.component.html'\r\n})\r\nexport class NumericConditionalExpressionTemplateDrivenComponent implements OnInit {\r\n    userinfo: UserInfo\r\n\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.userinfo= new UserInfo()\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form #userinfoForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Data Type</label>\r\n      <select name=\"dataType\" [(ngModel)]=\"userinfo.dataType\"  class=\"form-control\" numeric>\r\n\t\t<option [value]=\"item\" *ngFor=\"let item of dataTypes\">{{item}}</option>\r\n      </select>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls.dataType?.errors\">{{userinfoForm.controls.dataType?.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Real Number</label>\r\n      <input type=\"text\" name=\"realNumber\" [(ngModel)]=\"userinfo.realNumber\"  class=\"form-control\"  [numeric]=\"{'acceptValue':NumericValueType.Both,'conditionalExpression':'x => x.dataType == 'Real''}\" />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Real Number' then you need to add 'Data Type' input as 'Real'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls.realNumber?.errors\">{{userinfoForm.controls.realNumber?.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Integer Number</label>\r\n      <input type=\"text\" name=\"integerNumber\" [(ngModel)]=\"userinfo.integerNumber\"  class=\"form-control\"  [numeric]=\"{'acceptValue':NumericValueType.PositiveNumber,'conditionalExpression':(x,y) => x.dataType == 'Positive' }\" />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Integer Number' then you need to add 'Data Type' input as 'Positive'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls.integerNumber?.errors\">{{userinfoForm.controls.integerNumber?.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userinfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  numeric,prop, NumericValueType, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class UserInfo {\r\n\r\n\tdataType: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\trealNumber: number;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\tintegerNumber: number;\r\n\r\n}\r\n","Json":null},"add":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numeric-add-template-driven',\r\n    templateUrl: './numeric-add.component.html'\r\n})\r\nexport class NumericAddTemplateDrivenComponent implements OnInit {\r\n    userinfo: UserInfo\r\n\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.userinfo= new UserInfo()\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form #userinfoForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Integer Number</label>\r\n      <input type=\"text\" name=\"integerNumber\" [(ngModel)]=\"userinfo.integerNumber\"  class=\"form-control\"  [numeric]=\"{'acceptValue':NumericValueType.PositiveNumber,'allowDecimal':false}\" />\r\n      <small class=\"form-text text-muted\">you can enter only a non decimal positive number<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls.integerNumber?.errors\">{{userinfoForm.controls.integerNumber?.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userinfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  numeric,prop, NumericValueType, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class UserInfo {\r\n\r\n\tintegerNumber: number;\r\n\r\n}\r\n","Json":null}}