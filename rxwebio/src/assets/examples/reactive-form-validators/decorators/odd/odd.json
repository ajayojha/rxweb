{"conditionalExpressionExampleFunction":{"Notes":["Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>Function</span> object."],"Component":null,"Html":null,"Model":"@odd({conditionalExpression:(x,y) => x.type == \"Odd\"  }) \r\nnumber: number;","Json":null},"conditionalExpressionExampleString":{"Notes":["Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>string</span> datatype."],"Component":null,"Html":null,"Model":"@odd({conditionalExpression:'x => x.type == \"Odd\"' }) \r\noddNumber: number;","Json":null},"messageExample":{"Notes":null,"Component":null,"Html":null,"Model":"@odd({message:'{{0}} is not an odd number' }) \r\nmultiplesOfOddNumber: number;","Json":null},"complete":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-odd-complete',\r\n    templateUrl: './odd-complete.component.html'\r\n})\r\nexport class OddCompleteComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Type</label>\r\n      <input type=\"text\" formControlName=\"type\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' or 'Odd Number', then you need to add 'Type' input as 'Odd'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.type.errors\">{{userFormGroup.controls.type.errors.odd.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Number</label>\r\n      <input type=\"text\" formControlName=\"number\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' then you need to add 'Type' input as 'Odd'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.number.errors\">{{userFormGroup.controls.number.errors.odd.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Odd Number</label>\r\n      <input type=\"text\" formControlName=\"oddNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Odd Number' then you need to add 'Type' input as 'Odd'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.oddNumber.errors\">{{userFormGroup.controls.oddNumber.errors.odd.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Multiples of Odd Number</label>\r\n      <input type=\"text\" formControlName=\"multiplesOfOddNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only an odd number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.multiplesOfOddNumber.errors\">{{userFormGroup.controls.multiplesOfOddNumber.errors.odd.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  odd,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\ttype: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@odd({conditionalExpression:(x,y) => x.type == \"Odd\"  }) \r\n\tnumber: number;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@odd({conditionalExpression:'x => x.type == \"Odd\"' }) \r\n\toddNumber: number;\r\n\r\n\t@odd({message:'{{0}} is not an odd number' }) \r\n\tmultiplesOfOddNumber: number;\r\n\r\n}\r\n","Json":null},"conditionalExpression":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-odd-conditionalExpression',\r\n    templateUrl: './odd-conditional-expression.component.html'\r\n})\r\nexport class OddConditionalExpressionComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Type</label>\r\n      <input type=\"text\" formControlName=\"type\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' or 'Odd Number', then you need to add 'Type' input as 'Odd'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.type.errors\">{{userFormGroup.controls.type.errors.odd.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Odd Number</label>\r\n      <input type=\"text\" formControlName=\"oddNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Odd Number' then you need to add 'Type' input as 'Odd'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.oddNumber.errors\">{{userFormGroup.controls.oddNumber.errors.odd.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Number</label>\r\n      <input type=\"text\" formControlName=\"number\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' then you need to add 'Type' input as 'Odd'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.number.errors\">{{userFormGroup.controls.number.errors.odd.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  odd,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\ttype: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@odd({conditionalExpression:'x => x.type == \"Odd\"' }) \r\n\toddNumber: number;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@odd({conditionalExpression:(x,y) => x.type == \"Odd\"  }) \r\n\tnumber: number;\r\n\r\n}\r\n","Json":null},"message":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-odd-message',\r\n    templateUrl: './odd-message.component.html'\r\n})\r\nexport class OddMessageComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Multiples of Odd Number</label>\r\n      <input type=\"text\" formControlName=\"multiplesOfOddNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only an odd number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.multiplesOfOddNumber.errors\">{{userFormGroup.controls.multiplesOfOddNumber.errors.odd.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  odd,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@odd({message:'{{0}} is not an odd number' }) \r\n\tmultiplesOfOddNumber: number;\r\n\r\n}\r\n","Json":null},"dynamic":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration,} from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-odd-dynamic',\r\n    templateUrl: './odd-dynamic.component.html'\r\n})\r\nexport class OddDynamicComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/decorators/odd/dynamic/dynamic.json').subscribe(dynamic => {\r\n            formBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tthis.userFormGroup = this.formBuilder.formGroup(user,formBuilderConfiguration);\r\n        })\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  *ngIf=\"userFormGroup\"  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Type</label>\r\n      <input type=\"text\" formControlName=\"type\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' or 'Odd Number', then you need to add 'Type' input as 'Odd'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.type.errors\">{{userFormGroup.controls.type.errors.odd.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Odd Number</label>\r\n      <input type=\"text\" formControlName=\"oddNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Odd Number' then you need to add 'Type' input as 'Odd'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.oddNumber.errors\">{{userFormGroup.controls.oddNumber.errors.odd.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Multiples of Odd Number</label>\r\n      <input type=\"text\" formControlName=\"multiplesOfOddNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only an odd number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.multiplesOfOddNumber.errors\">{{userFormGroup.controls.multiplesOfOddNumber.errors.odd.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  odd,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\ttype: string;\r\n\r\n\t@prop()\r\n\toddNumber: number;\r\n\r\n\t@prop()\r\n\tmultiplesOfOddNumber: number;\r\n\r\n}\r\n","Json":"{\"type\":{\"odd\":true},\"oddNumber\":{\"conditionalExpression\":\"'x => x.type == \\\"Odd\\\"'\"},\"multiplesOfOddNumber\":{\"message\":\"'{{0}} is not an odd number'\"}}"},"add":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-odd-add',\r\n    templateUrl: './odd-add.component.html'\r\n})\r\nexport class OddAddComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Odd Number</label>\r\n      <input type=\"text\" formControlName=\"oddNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only an odd number<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.oddNumber.errors\">{{userFormGroup.controls.oddNumber.errors.odd.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  odd,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@odd() \r\n\toddNumber: number;\r\n\r\n}\r\n","Json":null},"edit":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-odd-edit',\r\n    templateUrl: './odd-edit.component.html'\r\n})\r\nexport class OddEditComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        this.http.get('assets/examples/reactive-form-validators/decorators/odd/edit/user-data.json').subscribe(user => {\r\n            this.userFormGroup = this.formBuilder.formGroup<User>(User,user);\r\n        })\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  *ngIf=\"userFormGroup\"  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Odd Number</label>\r\n      <input type=\"text\" formControlName=\"oddNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only an odd number<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.oddNumber.errors\">{{userFormGroup.controls.oddNumber.errors.odd.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  odd,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@odd() \r\n\toddNumber: number;\r\n\r\n}\r\n","Json":"{\"oddNumber\":\"13\"}"}}