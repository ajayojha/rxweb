{"allowWhiteSpaceExample":{"Notes":null,"Component":null,"Html":null,"Model":"@alphaNumeric({allowWhiteSpace:true }) \r\nflatAddress: string;","Json":null},"conditionalExpressionExampleFunction":{"Notes":["Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>Function</span> object."],"Component":null,"Html":null,"Model":"@alphaNumeric({conditionalExpression:(x,y) => x.areaName == \"Delhi\"  }) \r\ncountryCode: string;","Json":null},"conditionalExpressionExampleString":{"Notes":["Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>string</span> datatype."],"Component":null,"Html":null,"Model":"@alphaNumeric({conditionalExpression:'x => x.areaName ==\"Delhi\"' }) \r\ncityCode: string;","Json":null},"messageExample":{"Notes":null,"Component":null,"Html":null,"Model":"@alphaNumeric({allowWhiteSpace:true  ,message:'Please enter only alphanumerics, special characters are not allowed and whitespace is allowed.' }) \r\npostalAddress: string;","Json":null},"complete":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { Location } from './location.model';\r\n\r\n@Component({\r\n    selector: 'app-alphaNumeric-complete',\r\n    templateUrl: './alpha-numeric-complete.component.html'\r\n})\r\nexport class AlphaNumericCompleteComponent implements OnInit {\r\n    locationFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let location = new Location();\r\n        this.locationFormGroup = this.formBuilder.formGroup(location);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"locationFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Area Name</label>\r\n      <input type=\"text\" formControlName=\"areaName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'City Code'  or 'Country Code' then you need to add this input as 'Delhi'.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.areaName.errors\">{{locationFormGroup.controls.areaName.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Flat Address</label>\r\n      <input type=\"text\" formControlName=\"flatAddress\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.flatAddress.errors\">{{locationFormGroup.controls.flatAddress.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Postal Address</label>\r\n      <input type=\"text\" formControlName=\"postalAddress\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.postalAddress.errors\">{{locationFormGroup.controls.postalAddress.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Country Code</label>\r\n      <input type=\"text\" formControlName=\"countryCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on this field then you need to add 'areaName' input as 'Delhi'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.countryCode.errors\">{{locationFormGroup.controls.countryCode.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City Code</label>\r\n      <input type=\"text\" formControlName=\"cityCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on this field then you need to add 'areaName' input as 'Delhi'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.cityCode.errors\">{{locationFormGroup.controls.cityCode.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!locationFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  alphaNumeric,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class Location {\r\n\r\n\t@alphaNumeric() \r\n\tareaName: string;\r\n\r\n\t@alphaNumeric({allowWhiteSpace:true }) \r\n\tflatAddress: string;\r\n\r\n\t@alphaNumeric({allowWhiteSpace:true  ,message:'Please enter only alphanumerics, special characters are not allowed and whitespace is allowed.' }) \r\n\tpostalAddress: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@alphaNumeric({conditionalExpression:(x,y) => x.areaName == \"Delhi\"  }) \r\n\tcountryCode: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@alphaNumeric({conditionalExpression:'x => x.areaName ==\"Delhi\"' }) \r\n\tcityCode: string;\r\n\r\n}\r\n","Json":null},"allowWhiteSpace":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { Location } from './location.model';\r\n\r\n@Component({\r\n    selector: 'app-alphaNumeric-allowWhiteSpace',\r\n    templateUrl: './alpha-numeric-allow-white-space.component.html'\r\n})\r\nexport class AlphaNumericAllowWhiteSpaceComponent implements OnInit {\r\n    locationFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let location = new Location();\r\n        this.locationFormGroup = this.formBuilder.formGroup(location);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"locationFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Flat Address</label>\r\n      <input type=\"text\" formControlName=\"flatAddress\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.flatAddress.errors\">{{locationFormGroup.controls.flatAddress.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!locationFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  alphaNumeric,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class Location {\r\n\r\n\t@alphaNumeric({allowWhiteSpace:true }) \r\n\tflatAddress: string;\r\n\r\n}\r\n","Json":null},"message":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { Location } from './location.model';\r\n\r\n@Component({\r\n    selector: 'app-alphaNumeric-message',\r\n    templateUrl: './alpha-numeric-message.component.html'\r\n})\r\nexport class AlphaNumericMessageComponent implements OnInit {\r\n    locationFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let location = new Location();\r\n        this.locationFormGroup = this.formBuilder.formGroup(location);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"locationFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Postal Address</label>\r\n      <input type=\"text\" formControlName=\"postalAddress\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.postalAddress.errors\">{{locationFormGroup.controls.postalAddress.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!locationFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  alphaNumeric,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class Location {\r\n\r\n\t@alphaNumeric({allowWhiteSpace:true  ,message:'Please enter only alphanumerics, special characters are not allowed and whitespace is allowed.' }) \r\n\tpostalAddress: string;\r\n\r\n}\r\n","Json":null},"conditionalExpression":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { Location } from './location.model';\r\n\r\n@Component({\r\n    selector: 'app-alphaNumeric-conditionalExpression',\r\n    templateUrl: './alpha-numeric-conditional-expression.component.html'\r\n})\r\nexport class AlphaNumericConditionalExpressionComponent implements OnInit {\r\n    locationFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let location = new Location();\r\n        this.locationFormGroup = this.formBuilder.formGroup(location);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"locationFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Area Name</label>\r\n      <input type=\"text\" formControlName=\"areaName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'City Code'  or 'Country Code' then you need to add this input as 'Delhi'.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.areaName.errors\">{{locationFormGroup.controls.areaName.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City Code</label>\r\n      <input type=\"text\" formControlName=\"cityCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on this field then you need to add 'areaName' input as 'Delhi'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.cityCode.errors\">{{locationFormGroup.controls.cityCode.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Country Code</label>\r\n      <input type=\"text\" formControlName=\"countryCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on this field then you need to add 'areaName' input as 'Delhi'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.countryCode.errors\">{{locationFormGroup.controls.countryCode.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!locationFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  alphaNumeric,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class Location {\r\n\r\n\t@alphaNumeric() \r\n\tareaName: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@alphaNumeric({conditionalExpression:'x => x.areaName ==\"Delhi\"' }) \r\n\tcityCode: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@alphaNumeric({conditionalExpression:(x,y) => x.areaName == \"Delhi\"  }) \r\n\tcountryCode: string;\r\n\r\n}\r\n","Json":null},"dynamic":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration,} from '@rxweb/reactive-form-validators';\r\n\r\nimport { Location } from './location.model';\r\n\r\n@Component({\r\n    selector: 'app-alphaNumeric-dynamic',\r\n    templateUrl: './alpha-numeric-dynamic.component.html'\r\n})\r\nexport class AlphaNumericDynamicComponent implements OnInit {\r\n    locationFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        let location = new Location();\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/decorators/alphaNumeric/dynamic/dynamic.json').subscribe(dynamic => {\r\n            formBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tthis.locationFormGroup = this.formBuilder.formGroup(location,formBuilderConfiguration);\r\n        })\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  *ngIf=\"locationFormGroup\"  [formGroup]=\"locationFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Area Name</label>\r\n      <input type=\"text\" formControlName=\"areaName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'City Code'  or 'Country Code' then you need to add this input as 'Delhi'.<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.areaName.errors\">{{locationFormGroup.controls.areaName.errors.alphaNumeric.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Flat Address</label>\r\n      <input type=\"text\" formControlName=\"flatAddress\" class=\"form-control\"  />\r\n      <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.flatAddress.errors\">{{locationFormGroup.controls.flatAddress.errors.alphaNumeric.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Postal Address</label>\r\n      <input type=\"text\" formControlName=\"postalAddress\" class=\"form-control\"  />\r\n      <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.postalAddress.errors\">{{locationFormGroup.controls.postalAddress.errors.alphaNumeric.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City Code</label>\r\n      <input type=\"text\" formControlName=\"cityCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on this field then you need to add 'areaName' input as 'Delhi'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.cityCode.errors\">{{locationFormGroup.controls.cityCode.errors.alphaNumeric.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!locationFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  alphaNumeric,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class Location {\r\n\r\n\t@prop()\r\n\tareaName: string;\r\n\r\n\t@prop()\r\n\tflatAddress: string;\r\n\r\n\t@prop()\r\n\tpostalAddress: string;\r\n\r\n\t@prop()\r\n\tcityCode: string;\r\n\r\n}\r\n","Json":"{\"areaName\":{\"alphaNumeric\":true},\"flatAddress\":{\"allowWhiteSpace\":\"true\"},\"postalAddress\":{\"allowWhiteSpace\":\"true\",\"message\":\"'Please enter only alphanumerics, special characters are not allowed and whitespace is allowed.'\"},\"cityCode\":{\"conditionalExpression\":\"'x => x.areaName ==\\\"Delhi\\\"'\"}}"},"add":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { Location } from './location.model';\r\n\r\n@Component({\r\n    selector: 'app-alphaNumeric-add',\r\n    templateUrl: './alpha-numeric-add.component.html'\r\n})\r\nexport class AlphaNumericAddComponent implements OnInit {\r\n    locationFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let location = new Location();\r\n        this.locationFormGroup = this.formBuilder.formGroup(location);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"locationFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Area Name</label>\r\n      <input type=\"text\" formControlName=\"areaName\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.areaName.errors\">{{locationFormGroup.controls.areaName.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!locationFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  alphaNumeric,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class Location {\r\n\r\n\t@alphaNumeric() \r\n\tareaName: string;\r\n\r\n}\r\n","Json":null},"edit":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { Location } from './location.model';\r\n\r\n@Component({\r\n    selector: 'app-alphaNumeric-edit',\r\n    templateUrl: './alpha-numeric-edit.component.html'\r\n})\r\nexport class AlphaNumericEditComponent implements OnInit {\r\n    locationFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        this.http.get('assets/examples/reactive-form-validators/decorators/alphaNumeric/edit/location-data.json').subscribe(location => {\r\n            this.locationFormGroup = this.formBuilder.formGroup<Location>(Location,location);\r\n        })\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  *ngIf=\"locationFormGroup\"  [formGroup]=\"locationFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Area Name</label>\r\n      <input type=\"text\" formControlName=\"areaName\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.areaName.errors\">{{locationFormGroup.controls.areaName.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!locationFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  alphaNumeric,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class Location {\r\n\r\n\t@alphaNumeric() \r\n\tareaName: string;\r\n\r\n}\r\n","Json":"{\"areaName\":\"Delhi\"}"}}