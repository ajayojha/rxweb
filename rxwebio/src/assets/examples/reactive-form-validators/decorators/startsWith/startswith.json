{"valueExample":{"Notes":null,"Component":null,"Html":null,"Model":"@startsWith({value:'Senior'  ,conditionalExpression:(x,y) => x.name == \"Bharat\"  }) \r\nprofession: string;","Json":null},"conditionalExpressionExampleFunction":{"Notes":["Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>Function</span> object."],"Component":null,"Html":null,"Model":"@startsWith({value:'Senior'  ,conditionalExpression:(x,y) => x.name == \"Bharat\"  }) \r\nprofession: string;","Json":null},"conditionalExpressionExampleString":{"Notes":["Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>string</span> datatype."],"Component":null,"Html":null,"Model":"@startsWith({value:'#'  ,conditionalExpression:'x => x.name ==\"Bharat\"' }) \r\ntaskId: string;","Json":null},"messageExample":{"Notes":null,"Component":null,"Html":null,"Model":"@startsWith({value:'#'  ,conditionalExpression:'x => x.name ==\"Bharat\"' }) \r\ntaskId: string;","Json":null},"complete":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-startsWith-complete',\r\n    templateUrl: './starts-with-complete.component.html'\r\n})\r\nexport class StartsWithCompleteComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Name</label>\r\n      <input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' or 'Task Id', then you need to add 'name' input as 'Bharat'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.startsWith.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Profession</label>\r\n      <input type=\"text\" formControlName=\"profession\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">You can enter value which starts with 'Senior'<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' then you need to add 'name' input as 'Bharat'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.profession.errors\">{{userFormGroup.controls.profession.errors.startsWith.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Task Id</label>\r\n      <input type=\"text\" formControlName=\"taskId\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">You can enter value which starts with '#'<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Task Id' then you need to add 'name' input as 'Bharat'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.taskId.errors\">{{userFormGroup.controls.taskId.errors.startsWith.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  startsWith,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@startsWith({value:'B'  ,message:'{{0}} does not starts with `B`' }) \r\n\tname: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@startsWith({value:'Senior'  ,conditionalExpression:(x,y) => x.name == \"Bharat\"  }) \r\n\tprofession: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@startsWith({value:'#'  ,conditionalExpression:'x => x.name ==\"Bharat\"' }) \r\n\ttaskId: string;\r\n\r\n}\r\n","Json":null},"value":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-startsWith-value',\r\n    templateUrl: './starts-with-value.component.html'\r\n})\r\nexport class StartsWithValueComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Name</label>\r\n      <input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' or 'Task Id', then you need to add 'name' input as 'Bharat'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.startsWith.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  startsWith,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@startsWith({value:'B'  ,message:'{{0}} does not starts with `B`' }) \r\n\tname: string;\r\n\r\n}\r\n","Json":null},"message":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-startsWith-message',\r\n    templateUrl: './starts-with-message.component.html'\r\n})\r\nexport class StartsWithMessageComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Name</label>\r\n      <input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' or 'Task Id', then you need to add 'name' input as 'Bharat'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.startsWith.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  startsWith,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@startsWith({value:'B'  ,message:'{{0}} does not starts with `B`' }) \r\n\tname: string;\r\n\r\n}\r\n","Json":null},"conditionalExpression":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-startsWith-conditionalExpression',\r\n    templateUrl: './starts-with-conditional-expression.component.html'\r\n})\r\nexport class StartsWithConditionalExpressionComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Name</label>\r\n      <input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' or 'Task Id', then you need to add 'name' input as 'Bharat'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.startsWith.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Task Id</label>\r\n      <input type=\"text\" formControlName=\"taskId\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">You can enter value which starts with '#'<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Task Id' then you need to add 'name' input as 'Bharat'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.taskId.errors\">{{userFormGroup.controls.taskId.errors.startsWith.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Profession</label>\r\n      <input type=\"text\" formControlName=\"profession\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">You can enter value which starts with 'Senior'<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' then you need to add 'name' input as 'Bharat'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.profession.errors\">{{userFormGroup.controls.profession.errors.startsWith.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  startsWith,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@startsWith({value:'B'  ,message:'{{0}} does not starts with `B`' }) \r\n\tname: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@startsWith({value:'#'  ,conditionalExpression:'x => x.name ==\"Bharat\"' }) \r\n\ttaskId: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@startsWith({value:'Senior'  ,conditionalExpression:(x,y) => x.name == \"Bharat\"  }) \r\n\tprofession: string;\r\n\r\n}\r\n","Json":null},"dynamic":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration,} from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-startsWith-dynamic',\r\n    templateUrl: './starts-with-dynamic.component.html'\r\n})\r\nexport class StartsWithDynamicComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/decorators/startsWith/dynamic/dynamic.json').subscribe(dynamic => {\r\n            formBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tthis.userFormGroup = this.formBuilder.formGroup(user,formBuilderConfiguration);\r\n        })\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  *ngIf=\"userFormGroup\"  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Name</label>\r\n      <input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' or 'Task Id', then you need to add 'name' input as 'Bharat'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.startsWith.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Task Id</label>\r\n      <input type=\"text\" formControlName=\"taskId\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">You can enter value which starts with '#'<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Task Id' then you need to add 'name' input as 'Bharat'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.taskId.errors\">{{userFormGroup.controls.taskId.errors.startsWith.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  startsWith,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tname: string;\r\n\r\n\t@prop()\r\n\ttaskId: string;\r\n\r\n}\r\n","Json":"{\"name\":{\"value\":\"'B'\",\"message\":\"'{{0}} does not starts with `B`'\"},\"taskId\":{\"value\":\"'#'\",\"conditionalExpression\":\"'x => x.name ==\\\"Bharat\\\"'\"}}"},"add":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-startsWith-add',\r\n    templateUrl: './starts-with-add.component.html'\r\n})\r\nexport class StartsWithAddComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Name</label>\r\n      <input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">You can enter value which starts with 'n'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.startsWith.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  startsWith,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@startsWith({value:'n' }) \r\n\tname: string;\r\n\r\n}\r\n","Json":null},"edit":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-startsWith-edit',\r\n    templateUrl: './starts-with-edit.component.html'\r\n})\r\nexport class StartsWithEditComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        this.http.get('assets/examples/reactive-form-validators/decorators/startsWith/edit/user-data.json').subscribe(user => {\r\n            this.userFormGroup = this.formBuilder.formGroup<User>(User,user);\r\n        })\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  *ngIf=\"userFormGroup\"  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Name</label>\r\n      <input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">You can enter value which starts with 'n'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.startsWith.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  startsWith,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@startsWith({value:'n' }) \r\n\tname: string;\r\n\r\n}\r\n","Json":"{\"name\":\"nicholas\"}"}}