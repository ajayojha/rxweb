{"allowDecimalExample":{"Notes":null,"Component":null,"Html":null,"Model":"integerNumber: number;\r\n","Json":null},"acceptValueExample":{"Notes":null,"Component":null,"Html":null,"Model":"negativeNumber: number;\r\n","Json":null},"conditionalExpressionExampleFunction":{"Notes":["Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>Function</span> object."],"Component":null,"Html":null,"Model":"negativeNumber: number;\r\n","Json":null},"conditionalExpressionExampleString":{"Notes":["Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>string</span> datatype."],"Component":null,"Html":null,"Model":"\r\n//If you want to apply conditional expression of type 'function'","Json":null},"messageExample":{"Notes":null,"Component":null,"Html":null,"Model":"integerNumber: number;\r\n","Json":null},"complete":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numeric-complete',\r\n    templateUrl: './numeric-complete.component.html'\r\n})\r\nexport class NumericCompleteComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\t\t\t\tdataTypes = [ \"Real\", \"Positive\",];\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let userInfo = new UserInfo();\r\n        this.userInfoFormGroup = this.formBuilder.formGroup(userInfo);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Data Type</label>\r\n      <select formControlName=\"dataType\" class=\"form-control\">\r\n\t\t<option [value]=\"item\" *ngFor=\"let item of dataTypes\">{{item}}</option>\r\n      </select>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.dataType.errors\">{{userInfoFormGroup.controls.dataType.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Negative Number</label>\r\n      <input type=\"text\" formControlName=\"negativeNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a negative number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.negativeNumber.errors\">{{userInfoFormGroup.controls.negativeNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Decimal Number</label>\r\n      <input type=\"text\" formControlName=\"decimalNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a decimal number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.decimalNumber.errors\">{{userInfoFormGroup.controls.decimalNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Integer Number</label>\r\n      <input type=\"text\" formControlName=\"integerNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Integer Number' then you need to add 'Data Type' input as 'Positive'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.integerNumber.errors\">{{userInfoFormGroup.controls.integerNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Real Number</label>\r\n      <input type=\"text\" formControlName=\"realNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Real Number' then you need to add 'Data Type' input as 'Real'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.realNumber.errors\">{{userInfoFormGroup.controls.realNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  numeric,prop, NumericValueType, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class UserInfo {\r\n\r\n\t@prop()\r\n\tdataType: string;\r\n\r\n\t@numeric({acceptValue:NumericValueType.NegativeNumber  ,message:'{{0}} is not a negative number' }) \r\n\tnegativeNumber: number;\r\n\r\n\t@numeric({allowDecimal:true  ,message:'{{0}} is not a decimal number' }) \r\n\tdecimalNumber: number;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@numeric({acceptValue:NumericValueType.PositiveNumber  ,conditionalExpression:(x,y) => x.dataType == \"Positive\"  }) \r\n\tintegerNumber: number;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@numeric({acceptValue:NumericValueType.Both  ,conditionalExpression:'x => x.dataType == \"Real\"' }) \r\n\trealNumber: number;\r\n\r\n}\r\n","Json":null},"acceptValue":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numeric-acceptValue',\r\n    templateUrl: './numeric-accept-value.component.html'\r\n})\r\nexport class NumericAcceptValueComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let userInfo = new UserInfo();\r\n        this.userInfoFormGroup = this.formBuilder.formGroup(userInfo);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Negative Number</label>\r\n      <input type=\"text\" formControlName=\"negativeNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a negative number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.negativeNumber.errors\">{{userInfoFormGroup.controls.negativeNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  numeric,prop, NumericValueType, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class UserInfo {\r\n\r\n\t@numeric({acceptValue:NumericValueType.NegativeNumber  ,message:'{{0}} is not a negative number' }) \r\n\tnegativeNumber: number;\r\n\r\n}\r\n","Json":null},"message":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numeric-message',\r\n    templateUrl: './numeric-message.component.html'\r\n})\r\nexport class NumericMessageComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let userInfo = new UserInfo();\r\n        this.userInfoFormGroup = this.formBuilder.formGroup(userInfo);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Negative Number</label>\r\n      <input type=\"text\" formControlName=\"negativeNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a negative number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.negativeNumber.errors\">{{userInfoFormGroup.controls.negativeNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  numeric,prop, NumericValueType, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class UserInfo {\r\n\r\n\t@numeric({acceptValue:NumericValueType.NegativeNumber  ,message:'{{0}} is not a negative number' }) \r\n\tnegativeNumber: number;\r\n\r\n}\r\n","Json":null},"allowDecimal":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numeric-allowDecimal',\r\n    templateUrl: './numeric-allow-decimal.component.html'\r\n})\r\nexport class NumericAllowDecimalComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let userInfo = new UserInfo();\r\n        this.userInfoFormGroup = this.formBuilder.formGroup(userInfo);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Decimal Number</label>\r\n      <input type=\"text\" formControlName=\"decimalNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a decimal number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.decimalNumber.errors\">{{userInfoFormGroup.controls.decimalNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  numeric,prop, NumericValueType, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class UserInfo {\r\n\r\n\t@numeric({allowDecimal:true  ,message:'{{0}} is not a decimal number' }) \r\n\tdecimalNumber: number;\r\n\r\n}\r\n","Json":null},"conditionalExpression":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numeric-conditionalExpression',\r\n    templateUrl: './numeric-conditional-expression.component.html'\r\n})\r\nexport class NumericConditionalExpressionComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\t\t\t\tdataTypes = [ \"Real\", \"Positive\",];\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let userInfo = new UserInfo();\r\n        this.userInfoFormGroup = this.formBuilder.formGroup(userInfo);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Data Type</label>\r\n      <select formControlName=\"dataType\" class=\"form-control\">\r\n\t\t<option [value]=\"item\" *ngFor=\"let item of dataTypes\">{{item}}</option>\r\n      </select>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.dataType.errors\">{{userInfoFormGroup.controls.dataType.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Real Number</label>\r\n      <input type=\"text\" formControlName=\"realNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Real Number' then you need to add 'Data Type' input as 'Real'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.realNumber.errors\">{{userInfoFormGroup.controls.realNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Integer Number</label>\r\n      <input type=\"text\" formControlName=\"integerNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Integer Number' then you need to add 'Data Type' input as 'Positive'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.integerNumber.errors\">{{userInfoFormGroup.controls.integerNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  numeric,prop, NumericValueType, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class UserInfo {\r\n\r\n\t@prop()\r\n\tdataType: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@numeric({acceptValue:NumericValueType.Both  ,conditionalExpression:'x => x.dataType == \"Real\"' }) \r\n\trealNumber: number;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@numeric({acceptValue:NumericValueType.PositiveNumber  ,conditionalExpression:(x,y) => x.dataType == \"Positive\"  }) \r\n\tintegerNumber: number;\r\n\r\n}\r\n","Json":null},"dynamic":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration,\tNumericValueType} from '@rxweb/reactive-form-validators';\r\n\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numeric-dynamic',\r\n    templateUrl: './numeric-dynamic.component.html'\r\n})\r\nexport class NumericDynamicComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\t\t\t\tdataTypes = [ \"Real\", \"Positive\",];\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        let userInfo = new UserInfo();\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/decorators/numeric/dynamic/dynamic.json').subscribe(dynamic => {\r\n            formBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tthis.userInfoFormGroup = this.formBuilder.formGroup(userInfo,formBuilderConfiguration);\r\n        })\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  *ngIf=\"userInfoFormGroup\"  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Data Type</label>\r\n      <select formControlName=\"dataType\" class=\"form-control\">\r\n\t\t<option [value]=\"item\" *ngFor=\"let item of dataTypes\">{{item}}</option>\r\n      </select>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.dataType.errors\">{{userInfoFormGroup.controls.dataType.errors.numeric.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Negative Number</label>\r\n      <input type=\"text\" formControlName=\"negativeNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a negative number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.negativeNumber.errors\">{{userInfoFormGroup.controls.negativeNumber.errors.numeric.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Decimal Number</label>\r\n      <input type=\"text\" formControlName=\"decimalNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a decimal number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.decimalNumber.errors\">{{userInfoFormGroup.controls.decimalNumber.errors.numeric.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Real Number</label>\r\n      <input type=\"text\" formControlName=\"realNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Real Number' then you need to add 'Data Type' input as 'Real'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.realNumber.errors\">{{userInfoFormGroup.controls.realNumber.errors.numeric.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  numeric,prop, NumericValueType, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class UserInfo {\r\n\r\n\t@prop()\r\n\tdataType: string;\r\n\r\n\t@prop()\r\n\tnegativeNumber: number;\r\n\r\n\t@prop()\r\n\tdecimalNumber: number;\r\n\r\n\t@prop()\r\n\trealNumber: number;\r\n\r\n}\r\n","Json":"{\"dataType\":{\"numeric\":true},\"negativeNumber\":{\"acceptValue\":\"NumericValueType.NegativeNumber\",\"message\":\"'{{0}} is not a negative number'\"},\"decimalNumber\":{\"allowDecimal\":\"true\",\"message\":\"'{{0}} is not a decimal number'\"},\"realNumber\":{\"acceptValue\":\"NumericValueType.Both\",\"conditionalExpression\":\"'x => x.dataType == \\\"Real\\\"'\"}}"},"add":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numeric-add',\r\n    templateUrl: './numeric-add.component.html'\r\n})\r\nexport class NumericAddComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let userInfo = new UserInfo();\r\n        this.userInfoFormGroup = this.formBuilder.formGroup(userInfo);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Integer Number</label>\r\n      <input type=\"text\" formControlName=\"integerNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a non decimal positive number<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.integerNumber.errors\">{{userInfoFormGroup.controls.integerNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  numeric,prop, NumericValueType, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class UserInfo {\r\n\r\n\t@numeric({acceptValue:NumericValueType.PositiveNumber  ,allowDecimal:false }) \r\n\tintegerNumber: number;\r\n\r\n}\r\n","Json":null},"edit":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numeric-edit',\r\n    templateUrl: './numeric-edit.component.html'\r\n})\r\nexport class NumericEditComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        this.http.get('assets/examples/reactive-form-validators/decorators/numeric/edit/user-info-data.json').subscribe(userInfo => {\r\n            this.userInfoFormGroup = this.formBuilder.formGroup<UserInfo>(UserInfo,userInfo);\r\n        })\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  *ngIf=\"userInfoFormGroup\"  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Integer Number</label>\r\n      <input type=\"text\" formControlName=\"integerNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a non decimal positive number<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.integerNumber.errors\">{{userInfoFormGroup.controls.integerNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  numeric,prop, NumericValueType, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class UserInfo {\r\n\r\n\t@numeric({acceptValue:NumericValueType.PositiveNumber  ,allowDecimal:false }) \r\n\tintegerNumber: number;\r\n\r\n}\r\n","Json":"{\"integerNumber\":\"14\"}"}}