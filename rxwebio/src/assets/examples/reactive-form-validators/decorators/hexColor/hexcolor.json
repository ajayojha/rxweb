{"conditionalExpressionExampleFunction":{"Notes":["Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>Function</span> object."],"Component":null,"Html":null,"Model":"@hexColor({conditionalExpression:(x,y) =>x.color == \"#AFAFAF\" }) \r\nfooterHexCode: string;","Json":null},"conditionalExpressionExampleString":{"Notes":["Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>string</span> datatype."],"Component":null,"Html":null,"Model":"@hexColor({conditionalExpression:'x => x.color == \"#AFAFAF\"' }) \r\nheaderHexcolorCode: string;","Json":null},"messageExample":{"Notes":null,"Component":null,"Html":null,"Model":"@hexColor({message:'Please enter the right format of hexcode for body like \"#AFAFAF\"' }) \r\nbodyHexcolorCode: string;","Json":null},"complete":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { HexcolorInfo } from './hexcolor-info.model';\r\n\r\n@Component({\r\n    selector: 'app-hexColor-complete',\r\n    templateUrl: './hex-color-complete.component.html'\r\n})\r\nexport class HexColorCompleteComponent implements OnInit {\r\n    hexcolorInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let hexcolorInfo = new HexcolorInfo();\r\n        this.hexcolorInfoFormGroup = this.formBuilder.formGroup(hexcolorInfo);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"hexcolorInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Color Picker</label>\r\n      <input type=\"text\" formControlName=\"color\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Footer Hexcode' or 'Header Hexcode', then you need to add 'Color Picker' input as '#AFAFAF'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"hexcolorInfoFormGroup.controls.color.errors\">{{hexcolorInfoFormGroup.controls.color.errors.hexColor.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Footer Hexcode</label>\r\n      <input type=\"text\" formControlName=\"footerHexCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation of hex color validation on 'Footer Hexcode' then you need to add 'Color Picker' input as '#AFAFAF'<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"hexcolorInfoFormGroup.controls.footerHexCode.errors\">{{hexcolorInfoFormGroup.controls.footerHexCode.errors.hexColor.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Header Hexcode</label>\r\n      <input type=\"text\" formControlName=\"headerHexcolorCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Header Hexcode' then you need to add 'Color Picker' input as '#AFAFAF'<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"hexcolorInfoFormGroup.controls.headerHexcolorCode.errors\">{{hexcolorInfoFormGroup.controls.headerHexcolorCode.errors.hexColor.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Body Hexcode</label>\r\n      <input type=\"text\" formControlName=\"bodyHexcolorCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"hexcolorInfoFormGroup.controls.bodyHexcolorCode.errors\">{{hexcolorInfoFormGroup.controls.bodyHexcolorCode.errors.hexColor.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!hexcolorInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  hexColor,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class HexcolorInfo {\r\n\r\n\t@hexColor() \r\n\tcolor: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@hexColor({conditionalExpression:(x,y) =>x.color == \"#AFAFAF\" }) \r\n\tfooterHexCode: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@hexColor({conditionalExpression:'x => x.color == \"#AFAFAF\"' }) \r\n\theaderHexcolorCode: string;\r\n\r\n\t@hexColor({message:'Please enter the right format of hexcode for body like \"#AFAFAF\"' }) \r\n\tbodyHexcolorCode: string;\r\n\r\n}\r\n","Json":null},"conditionalExpression":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { HexcolorInfo } from './hexcolor-info.model';\r\n\r\n@Component({\r\n    selector: 'app-hexColor-conditionalExpression',\r\n    templateUrl: './hex-color-conditional-expression.component.html'\r\n})\r\nexport class HexColorConditionalExpressionComponent implements OnInit {\r\n    hexcolorInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let hexcolorInfo = new HexcolorInfo();\r\n        this.hexcolorInfoFormGroup = this.formBuilder.formGroup(hexcolorInfo);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"hexcolorInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Color Picker</label>\r\n      <input type=\"text\" formControlName=\"color\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Footer Hexcode' or 'Header Hexcode', then you need to add 'Color Picker' input as '#AFAFAF'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"hexcolorInfoFormGroup.controls.color.errors\">{{hexcolorInfoFormGroup.controls.color.errors.hexColor.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Header Hexcode</label>\r\n      <input type=\"text\" formControlName=\"headerHexcolorCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Header Hexcode' then you need to add 'Color Picker' input as '#AFAFAF'<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"hexcolorInfoFormGroup.controls.headerHexcolorCode.errors\">{{hexcolorInfoFormGroup.controls.headerHexcolorCode.errors.hexColor.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Footer Hexcode</label>\r\n      <input type=\"text\" formControlName=\"footerHexCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation of hex color validation on 'Footer Hexcode' then you need to add 'Color Picker' input as '#AFAFAF'<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"hexcolorInfoFormGroup.controls.footerHexCode.errors\">{{hexcolorInfoFormGroup.controls.footerHexCode.errors.hexColor.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!hexcolorInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  hexColor,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class HexcolorInfo {\r\n\r\n\t@hexColor() \r\n\tcolor: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@hexColor({conditionalExpression:'x => x.color == \"#AFAFAF\"' }) \r\n\theaderHexcolorCode: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@hexColor({conditionalExpression:(x,y) =>x.color == \"#AFAFAF\" }) \r\n\tfooterHexCode: string;\r\n\r\n}\r\n","Json":null},"message":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { HexcolorInfo } from './hexcolor-info.model';\r\n\r\n@Component({\r\n    selector: 'app-hexColor-message',\r\n    templateUrl: './hex-color-message.component.html'\r\n})\r\nexport class HexColorMessageComponent implements OnInit {\r\n    hexcolorInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let hexcolorInfo = new HexcolorInfo();\r\n        this.hexcolorInfoFormGroup = this.formBuilder.formGroup(hexcolorInfo);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"hexcolorInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Body Hexcode</label>\r\n      <input type=\"text\" formControlName=\"bodyHexcolorCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"hexcolorInfoFormGroup.controls.bodyHexcolorCode.errors\">{{hexcolorInfoFormGroup.controls.bodyHexcolorCode.errors.hexColor.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!hexcolorInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  hexColor,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class HexcolorInfo {\r\n\r\n\t@hexColor({message:'Please enter the right format of hexcode for body like \"#AFAFAF\"' }) \r\n\tbodyHexcolorCode: string;\r\n\r\n}\r\n","Json":null},"dynamic":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration,} from '@rxweb/reactive-form-validators';\r\n\r\nimport { HexcolorInfo } from './hexcolor-info.model';\r\n\r\n@Component({\r\n    selector: 'app-hexColor-dynamic',\r\n    templateUrl: './hex-color-dynamic.component.html'\r\n})\r\nexport class HexColorDynamicComponent implements OnInit {\r\n    hexcolorInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        let hexcolorInfo = new HexcolorInfo();\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/decorators/hexColor/dynamic/dynamic.json').subscribe(dynamic => {\r\n            formBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tthis.hexcolorInfoFormGroup = this.formBuilder.formGroup(hexcolorInfo,formBuilderConfiguration);\r\n        })\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  *ngIf=\"hexcolorInfoFormGroup\"  [formGroup]=\"hexcolorInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Color Picker</label>\r\n      <input type=\"text\" formControlName=\"color\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Footer Hexcode' or 'Header Hexcode', then you need to add 'Color Picker' input as '#AFAFAF'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"hexcolorInfoFormGroup.controls.color.errors\">{{hexcolorInfoFormGroup.controls.color.errors.hexColor.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Header Hexcode</label>\r\n      <input type=\"text\" formControlName=\"headerHexcolorCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Header Hexcode' then you need to add 'Color Picker' input as '#AFAFAF'<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"hexcolorInfoFormGroup.controls.headerHexcolorCode.errors\">{{hexcolorInfoFormGroup.controls.headerHexcolorCode.errors.hexColor.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Body Hexcode</label>\r\n      <input type=\"text\" formControlName=\"bodyHexcolorCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"hexcolorInfoFormGroup.controls.bodyHexcolorCode.errors\">{{hexcolorInfoFormGroup.controls.bodyHexcolorCode.errors.hexColor.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!hexcolorInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  hexColor,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class HexcolorInfo {\r\n\r\n\t@prop()\r\n\tcolor: string;\r\n\r\n\t@prop()\r\n\theaderHexcolorCode: string;\r\n\r\n\t@prop()\r\n\tbodyHexcolorCode: string;\r\n\r\n}\r\n","Json":"{\"color\":{\"hexColor\":true},\"headerHexcolorCode\":{\"conditionalExpression\":\"'x => x.color == \\\"#AFAFAF\\\"'\"},\"bodyHexcolorCode\":{\"message\":\"'Please enter the right format of hexcode for body like \\\"#AFAFAF\\\"'\"}}"},"add":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-hexColor-add',\r\n    templateUrl: './hex-color-add.component.html'\r\n})\r\nexport class HexColorAddComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Color Picker</label>\r\n      <input type=\"text\" formControlName=\"color\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.color.errors\">{{userFormGroup.controls.color.errors.hexColor.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  hexColor,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@hexColor() \r\n\tcolor: string;\r\n\r\n}\r\n","Json":null},"edit":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-hexColor-edit',\r\n    templateUrl: './hex-color-edit.component.html'\r\n})\r\nexport class HexColorEditComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        this.http.get('assets/examples/reactive-form-validators/decorators/hexColor/edit/user-data.json').subscribe(user => {\r\n            this.userFormGroup = this.formBuilder.formGroup<User>(User,user);\r\n        })\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  *ngIf=\"userFormGroup\"  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Color Picker</label>\r\n      <input type=\"text\" formControlName=\"color\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.color.errors\">{{userFormGroup.controls.color.errors.hexColor.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  hexColor,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@hexColor() \r\n\tcolor: string;\r\n\r\n}\r\n","Json":"{\"color\":\"#AFAFAF\"}"}}