{"dividendExample":{"Notes":null,"Component":null,"Html":null,"Model":"@factor({dividend:50  ,message:'{{0}} is not a factor of 50' }) \r\nfourthNumber: number;","Json":null},"fieldNameExample":{"Notes":null,"Component":null,"Html":null,"Model":"@factor({fieldName:\"firstNumber\" }) \r\nfifthNumber: number;","Json":null},"conditionalExpressionExampleFunction":{"Notes":["Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>Function</span> object."],"Component":null,"Html":null,"Model":"@factor({fieldName:\"firstNumber\"  ,conditionalExpression:(x,y) =>x.firstNumber == 25  }) \r\nsecondNumber: number;","Json":null},"conditionalExpressionExampleString":{"Notes":["Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>string</span> datatype."],"Component":null,"Html":null,"Model":"@factor({fieldName:\"firstNumber\"  ,conditionalExpression:'x => x.firstNumber == 25' }) \r\nthirdNumber: number;","Json":null},"messageExample":{"Notes":null,"Component":null,"Html":null,"Model":"@factor({dividend:50  ,message:'{{0}} is not a factor of 50' }) \r\nfourthNumber: number;","Json":null},"complete":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-factor-complete',\r\n    templateUrl: './factor-complete.component.html'\r\n})\r\nexport class FactorCompleteComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>First Number</label>\r\n      <input type=\"text\" formControlName=\"firstNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Second Number' or 'Third Number', then you need to add 'First Number' input as '25'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstNumber.errors\">{{userFormGroup.controls.firstNumber.errors.factor.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Fifth Number</label>\r\n      <input type=\"text\" formControlName=\"fifthNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">To apply the validation of factor on 'Fifth Number' field<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.fifthNumber.errors\">{{userFormGroup.controls.fifthNumber.errors.factor.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Second Number</label>\r\n      <input type=\"text\" formControlName=\"secondNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">To apply the validation of factor on 'Fourth Number' field, then enter the value '25' in 'First Number' textbox<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.secondNumber.errors\">{{userFormGroup.controls.secondNumber.errors.factor.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Third Number</label>\r\n      <input type=\"text\" formControlName=\"thirdNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">To apply the validation of factor on 'Fourth Number' field, then enter the value '25' in 'First Number' textbox<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.thirdNumber.errors\">{{userFormGroup.controls.thirdNumber.errors.factor.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Fourth Number</label>\r\n      <input type=\"text\" formControlName=\"fourthNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only factors of 50<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.fourthNumber.errors\">{{userFormGroup.controls.fourthNumber.errors.factor.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  factor,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tfirstNumber: number;\r\n\r\n\t@factor({fieldName:\"firstNumber\" }) \r\n\tfifthNumber: number;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@factor({fieldName:\"firstNumber\"  ,conditionalExpression:(x,y) =>x.firstNumber == 25  }) \r\n\tsecondNumber: number;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@factor({fieldName:\"firstNumber\"  ,conditionalExpression:'x => x.firstNumber == 25' }) \r\n\tthirdNumber: number;\r\n\r\n\t@factor({dividend:50  ,message:'{{0}} is not a factor of 50' }) \r\n\tfourthNumber: number;\r\n\r\n}\r\n","Json":null},"fieldName":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-factor-fieldName',\r\n    templateUrl: './factor-field-name.component.html'\r\n})\r\nexport class FactorFieldNameComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>First Number</label>\r\n      <input type=\"text\" formControlName=\"firstNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Second Number' or 'Third Number', then you need to add 'First Number' input as '25'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstNumber.errors\">{{userFormGroup.controls.firstNumber.errors.factor.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Third Number</label>\r\n      <input type=\"text\" formControlName=\"thirdNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">To apply the validation of factor on 'Fourth Number' field, then enter the value '25' in 'First Number' textbox<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.thirdNumber.errors\">{{userFormGroup.controls.thirdNumber.errors.factor.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Fifth Number</label>\r\n      <input type=\"text\" formControlName=\"fifthNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">To apply the validation of factor on 'Fifth Number' field<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.fifthNumber.errors\">{{userFormGroup.controls.fifthNumber.errors.factor.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  factor,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tfirstNumber: number;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@factor({fieldName:\"firstNumber\"  ,conditionalExpression:'x => x.firstNumber == 25' }) \r\n\tthirdNumber: number;\r\n\r\n\t@factor({fieldName:\"firstNumber\" }) \r\n\tfifthNumber: number;\r\n\r\n}\r\n","Json":null},"conditionalExpression":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-factor-conditionalExpression',\r\n    templateUrl: './factor-conditional-expression.component.html'\r\n})\r\nexport class FactorConditionalExpressionComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>First Number</label>\r\n      <input type=\"text\" formControlName=\"firstNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Second Number' or 'Third Number', then you need to add 'First Number' input as '25'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstNumber.errors\">{{userFormGroup.controls.firstNumber.errors.factor.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Third Number</label>\r\n      <input type=\"text\" formControlName=\"thirdNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">To apply the validation of factor on 'Fourth Number' field, then enter the value '25' in 'First Number' textbox<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.thirdNumber.errors\">{{userFormGroup.controls.thirdNumber.errors.factor.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Second Number</label>\r\n      <input type=\"text\" formControlName=\"secondNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">To apply the validation of factor on 'Fourth Number' field, then enter the value '25' in 'First Number' textbox<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.secondNumber.errors\">{{userFormGroup.controls.secondNumber.errors.factor.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  factor,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tfirstNumber: number;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@factor({fieldName:\"firstNumber\"  ,conditionalExpression:'x => x.firstNumber == 25' }) \r\n\tthirdNumber: number;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@factor({fieldName:\"firstNumber\"  ,conditionalExpression:(x,y) =>x.firstNumber == 25  }) \r\n\tsecondNumber: number;\r\n\r\n}\r\n","Json":null},"dividend":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-factor-dividend',\r\n    templateUrl: './factor-dividend.component.html'\r\n})\r\nexport class FactorDividendComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Fourth Number</label>\r\n      <input type=\"text\" formControlName=\"fourthNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only factors of 50<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.fourthNumber.errors\">{{userFormGroup.controls.fourthNumber.errors.factor.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  factor,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@factor({dividend:50  ,message:'{{0}} is not a factor of 50' }) \r\n\tfourthNumber: number;\r\n\r\n}\r\n","Json":null},"message":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-factor-message',\r\n    templateUrl: './factor-message.component.html'\r\n})\r\nexport class FactorMessageComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Fourth Number</label>\r\n      <input type=\"text\" formControlName=\"fourthNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only factors of 50<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.fourthNumber.errors\">{{userFormGroup.controls.fourthNumber.errors.factor.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  factor,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@factor({dividend:50  ,message:'{{0}} is not a factor of 50' }) \r\n\tfourthNumber: number;\r\n\r\n}\r\n","Json":null},"dynamic":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration,} from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-factor-dynamic',\r\n    templateUrl: './factor-dynamic.component.html'\r\n})\r\nexport class FactorDynamicComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/decorators/factor/dynamic/dynamic.json').subscribe(dynamic => {\r\n            formBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tthis.userFormGroup = this.formBuilder.formGroup(user,formBuilderConfiguration);\r\n        })\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  *ngIf=\"userFormGroup\"  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>First Number</label>\r\n      <input type=\"text\" formControlName=\"firstNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Second Number' or 'Third Number', then you need to add 'First Number' input as '25'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstNumber.errors\">{{userFormGroup.controls.firstNumber.errors.factor.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Fifth Number</label>\r\n      <input type=\"text\" formControlName=\"fifthNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">To apply the validation of factor on 'Fifth Number' field<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.fifthNumber.errors\">{{userFormGroup.controls.fifthNumber.errors.factor.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Third Number</label>\r\n      <input type=\"text\" formControlName=\"thirdNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">To apply the validation of factor on 'Fourth Number' field, then enter the value '25' in 'First Number' textbox<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.thirdNumber.errors\">{{userFormGroup.controls.thirdNumber.errors.factor.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Fourth Number</label>\r\n      <input type=\"text\" formControlName=\"fourthNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only factors of 50<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.fourthNumber.errors\">{{userFormGroup.controls.fourthNumber.errors.factor.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  factor,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tfirstNumber: number;\r\n\r\n\t@prop()\r\n\tfifthNumber: number;\r\n\r\n\t@prop()\r\n\tthirdNumber: number;\r\n\r\n\t@prop()\r\n\tfourthNumber: number;\r\n\r\n}\r\n","Json":"{\"firstNumber\":{\"factor\":true},\"fifthNumber\":{\"fieldName\":\"\\\"firstNumber\\\"\"},\"thirdNumber\":{\"fieldName\":\"\\\"firstNumber\\\"\",\"conditionalExpression\":\"'x => x.firstNumber == 25'\"},\"fourthNumber\":{\"dividend\":\"50\",\"message\":\"'{{0}} is not a factor of 50'\"}}"},"add":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-factor-add',\r\n    templateUrl: './factor-add.component.html'\r\n})\r\nexport class FactorAddComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>First Number</label>\r\n      <input type=\"text\" formControlName=\"firstNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">You can only enter factors of 50<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstNumber.errors\">{{userFormGroup.controls.firstNumber.errors.factor.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  factor,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@factor({dividend:50 }) \r\n\tfirstNumber: Number;\r\n\r\n}\r\n","Json":null},"edit":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-factor-edit',\r\n    templateUrl: './factor-edit.component.html'\r\n})\r\nexport class FactorEditComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        this.http.get('assets/examples/reactive-form-validators/decorators/factor/edit/user-data.json').subscribe(user => {\r\n            this.userFormGroup = this.formBuilder.formGroup<User>(User,user);\r\n        })\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  *ngIf=\"userFormGroup\"  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>First Number</label>\r\n      <input type=\"text\" formControlName=\"firstNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">You can only enter factors of 50<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstNumber.errors\">{{userFormGroup.controls.firstNumber.errors.factor.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  factor,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@factor({dividend:50 }) \r\n\tfirstNumber: Number;\r\n\r\n}\r\n","Json":"{\"firstNumber\":\"5\"}"}}