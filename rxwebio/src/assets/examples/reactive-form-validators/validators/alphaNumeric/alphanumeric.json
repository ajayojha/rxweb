{"complete":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-alphaNumeric-complete-validator',\r\n    templateUrl: './alpha-numeric-complete.component.html'\r\n})\r\nexport class AlphaNumericCompleteValidatorComponent implements OnInit {\r\n    locationFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder)\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.locationFormGroup = this.formBuilder.group({\r\n            areaName:['', RxwebValidators.alphaNumeric()], \r\n            flatAddress:['', RxwebValidators.alphaNumeric({allowWhiteSpace:true })], \r\n            postalAddress:['', RxwebValidators.alphaNumeric({allowWhiteSpace:true  ,message:'Please enter only alphanumerics, special characters are not allowed and whitespace is allowed.' })], \r\n            countryCode:['', RxwebValidators.alphaNumeric({conditionalExpression:(x,y) => x.areaName == \"Delhi\"  })], \r\n            cityCode:['', RxwebValidators.alphaNumeric({conditionalExpression:'x => x.areaName ==\"Delhi\"' })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"locationFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Area Name</label>\r\n      <input type=\"text\" formControlName=\"areaName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'City Code'  or 'Country Code' then you need to add this input as 'Delhi'.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.areaName.errors\">{{locationFormGroup.controls.areaName.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Flat Address</label>\r\n      <input type=\"text\" formControlName=\"flatAddress\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.flatAddress.errors\">{{locationFormGroup.controls.flatAddress.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Postal Address</label>\r\n      <input type=\"text\" formControlName=\"postalAddress\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.postalAddress.errors\">{{locationFormGroup.controls.postalAddress.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Country Code</label>\r\n      <input type=\"text\" formControlName=\"countryCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on this field then you need to add 'areaName' input as 'Delhi'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.countryCode.errors\">{{locationFormGroup.controls.countryCode.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City Code</label>\r\n      <input type=\"text\" formControlName=\"cityCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on this field then you need to add 'areaName' input as 'Delhi'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.cityCode.errors\">{{locationFormGroup.controls.cityCode.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!locationFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null,"Json":null},"allowWhiteSpace":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-alphaNumeric-allowWhiteSpace-validator',\r\n    templateUrl: './alpha-numeric-allow-white-space.component.html'\r\n})\r\nexport class AlphaNumericAllowWhiteSpaceValidatorComponent implements OnInit {\r\n    locationFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder)\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.locationFormGroup = this.formBuilder.group({\r\n            flatAddress:['', RxwebValidators.alphaNumeric({allowWhiteSpace:true })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"locationFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Flat Address</label>\r\n      <input type=\"text\" formControlName=\"flatAddress\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.flatAddress.errors\">{{locationFormGroup.controls.flatAddress.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!locationFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null,"Json":null},"allowWhiteSpaceExample":{"Notes":[],"Component":"","Html":"","Model":"            flatAddress:['', RxwebValidators.alphaNumeric({allowWhiteSpace:true })], ","Json":null},"message":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-alphaNumeric-message-validator',\r\n    templateUrl: './alpha-numeric-message.component.html'\r\n})\r\nexport class AlphaNumericMessageValidatorComponent implements OnInit {\r\n    locationFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder)\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.locationFormGroup = this.formBuilder.group({\r\n            postalAddress:['', RxwebValidators.alphaNumeric({allowWhiteSpace:true  ,message:'Please enter only alphanumerics, special characters are not allowed and whitespace is allowed.' })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"locationFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Postal Address</label>\r\n      <input type=\"text\" formControlName=\"postalAddress\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.postalAddress.errors\">{{locationFormGroup.controls.postalAddress.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!locationFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null,"Json":null},"messageExample":{"Notes":[],"Component":"","Html":"","Model":"            postalAddress:['', RxwebValidators.alphaNumeric({allowWhiteSpace:true  ,message:'Please enter only alphanumerics, special characters are not allowed and whitespace is allowed.' })], ","Json":null},"conditionalExpression":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-alphaNumeric-conditionalExpression-validator',\r\n    templateUrl: './alpha-numeric-conditional-expression.component.html'\r\n})\r\nexport class AlphaNumericConditionalExpressionValidatorComponent implements OnInit {\r\n    locationFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder)\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.locationFormGroup = this.formBuilder.group({\r\n            areaName:['', RxwebValidators.alphaNumeric()], \r\n            cityCode:['', RxwebValidators.alphaNumeric({conditionalExpression:'x => x.areaName ==\"Delhi\"' })], \r\n            countryCode:['', RxwebValidators.alphaNumeric({conditionalExpression:(x,y) => x.areaName == \"Delhi\"  })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"locationFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Area Name</label>\r\n      <input type=\"text\" formControlName=\"areaName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'City Code'  or 'Country Code' then you need to add this input as 'Delhi'.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.areaName.errors\">{{locationFormGroup.controls.areaName.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City Code</label>\r\n      <input type=\"text\" formControlName=\"cityCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on this field then you need to add 'areaName' input as 'Delhi'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.cityCode.errors\">{{locationFormGroup.controls.cityCode.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Country Code</label>\r\n      <input type=\"text\" formControlName=\"countryCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on this field then you need to add 'areaName' input as 'Delhi'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.countryCode.errors\">{{locationFormGroup.controls.countryCode.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!locationFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null,"Json":null},"conditionalExpressionExampleString":{"Notes":["Binding <span class='highlighted'>conditionalExpression </span> with <span class='highlighted'> string</span> object."],"Component":null,"Html":null,"Model":"            cityCode:['', RxwebValidators.alphaNumeric({conditionalExpression:'x => x.areaName ==\"Delhi\"' })], ","Json":null},"conditionalExpressionExampleFunction":{"Notes":["Binding <span class='highlighted'>conditionalExpression </span> with <span class='highlighted'> Function</span> object."],"Component":null,"Html":null,"Model":"            countryCode:['', RxwebValidators.alphaNumeric({conditionalExpression:(x,y) => x.areaName == \"Delhi\"  })], ","Json":null},"dynamic":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormBuilderConfiguration} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-alphaNumeric-dynamic-validator',\r\n    templateUrl: './alpha-numeric-dynamic.component.html'\r\n})\r\nexport class AlphaNumericDynamicValidatorComponent implements OnInit {\r\n    locationFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder , private http: HttpClient )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n\t\tlet formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/validators/alphaNumeric/dynamic/dynamic.json').subscribe(dynamic => {\r\n\t\t\tformBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tvar location = { areaName:'', flatAddress:'', postalAddress:'', countryCode:'', cityCode:'',  }\r\n\t\t\tthis.locationFormGroup = this.formBuilder.group(location,formBuilderConfiguration);\r\n\t\t})\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  *ngIf=\"locationFormGroup\"  [formGroup]=\"locationFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Area Name</label>\r\n      <input type=\"text\" formControlName=\"areaName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'City Code'  or 'Country Code' then you need to add this input as 'Delhi'.<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.areaName.errors\">{{locationFormGroup.controls.areaName.errors.alphaNumeric.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Flat Address</label>\r\n      <input type=\"text\" formControlName=\"flatAddress\" class=\"form-control\"  />\r\n      <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.flatAddress.errors\">{{locationFormGroup.controls.flatAddress.errors.alphaNumeric.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Postal Address</label>\r\n      <input type=\"text\" formControlName=\"postalAddress\" class=\"form-control\"  />\r\n      <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.postalAddress.errors\">{{locationFormGroup.controls.postalAddress.errors.alphaNumeric.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City Code</label>\r\n      <input type=\"text\" formControlName=\"cityCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on this field then you need to add 'areaName' input as 'Delhi'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.cityCode.errors\">{{locationFormGroup.controls.cityCode.errors.alphaNumeric.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!locationFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null,"Json":"{\"areaName\":{\"alphaNumeric\":true},\"flatAddress\":{\"allowWhiteSpace\":\"true\"},\"postalAddress\":{\"allowWhiteSpace\":\"true\",\"message\":\"'Please enter only alphanumerics, special characters are not allowed and whitespace is allowed.'\"},\"cityCode\":{\"conditionalExpression\":\"'x => x.areaName ==\\\"Delhi\\\"'\"}}"},"add":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-alphaNumeric-add-validator',\r\n    templateUrl: './alpha-numeric-add.component.html'\r\n})\r\nexport class AlphaNumericAddValidatorComponent implements OnInit {\r\n    locationFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder)\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.locationFormGroup = this.formBuilder.group({\r\n            areaName:['', RxwebValidators.alphaNumeric()], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"locationFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Area Name</label>\r\n      <input type=\"text\" formControlName=\"areaName\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.areaName.errors\">{{locationFormGroup.controls.areaName.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!locationFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null,"Json":null}}