{"complete":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-maxNumber-complete-validator',\r\n    templateUrl: './max-number-complete.component.html'\r\n})\r\nexport class MaxNumberCompleteValidatorComponent implements OnInit {\r\n    subjectDetailsFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder)\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.subjectDetailsFormGroup = this.formBuilder.group({\r\n            subjectCode:['',], \r\n            maximumMarks:['', RxwebValidators.maxNumber({value:100  ,conditionalExpression:(x,y) => x.subjectCode == \"8CS5A\"  })], \r\n            obtainedMarks:['', RxwebValidators.maxNumber({value:100  ,conditionalExpression:'x => x.subjectCode == \"8CS5A\"' })], \r\n            passingMarks:['', RxwebValidators.maxNumber({value:50  ,message:'{{0}} exceeds the Maximum marks Limit' })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"subjectDetailsFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Subject Code</label>\r\n      <input type=\"text\" formControlName=\"subjectCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Maximum Marks' or 'Obtained Marks', then you need to add 'Type' input as '8CS5A'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"subjectDetailsFormGroup.controls.subjectCode.errors\">{{subjectDetailsFormGroup.controls.subjectCode.errors.maxNumber.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Maximum Marks for above subject code</label>\r\n      <input type=\"text\" formControlName=\"maximumMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">To apply the validation of Max Number on 'Maximum Marks' field, then enter the value '8CS5A' in 'Subject Code' textbox and you can enter maxNumber upto 100<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"subjectDetailsFormGroup.controls.maximumMarks.errors\">{{subjectDetailsFormGroup.controls.maximumMarks.errors.maxNumber.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Obtained Marks for above subject code</label>\r\n      <input type=\"text\" formControlName=\"obtainedMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">To apply the validation of Max Number on 'Obtained Marks' field, then enter the value '8CS5A' in 'Subject Code' textbox and you can enter maxNumber upto 100<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"subjectDetailsFormGroup.controls.obtainedMarks.errors\">{{subjectDetailsFormGroup.controls.obtainedMarks.errors.maxNumber.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Passing Marks</label>\r\n      <input type=\"text\" formControlName=\"passingMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter MaxNumber upto 50<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"subjectDetailsFormGroup.controls.passingMarks.errors\">{{subjectDetailsFormGroup.controls.passingMarks.errors.maxNumber.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!subjectDetailsFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null,"Json":null},"value":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-maxNumber-value-validator',\r\n    templateUrl: './max-number-value.component.html'\r\n})\r\nexport class MaxNumberValueValidatorComponent implements OnInit {\r\n    subjectDetailsFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder)\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.subjectDetailsFormGroup = this.formBuilder.group({\r\n            subjectCode:['',], \r\n            obtainedMarks:['', RxwebValidators.maxNumber({value:100  ,conditionalExpression:'x => x.subjectCode == \"8CS5A\"' })], \r\n            maximumMarks:['', RxwebValidators.maxNumber({value:100  ,conditionalExpression:(x,y) => x.subjectCode == \"8CS5A\"  })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"subjectDetailsFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Subject Code</label>\r\n      <input type=\"text\" formControlName=\"subjectCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Maximum Marks' or 'Obtained Marks', then you need to add 'Type' input as '8CS5A'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"subjectDetailsFormGroup.controls.subjectCode.errors\">{{subjectDetailsFormGroup.controls.subjectCode.errors.maxNumber.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Obtained Marks for above subject code</label>\r\n      <input type=\"text\" formControlName=\"obtainedMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">To apply the validation of Max Number on 'Obtained Marks' field, then enter the value '8CS5A' in 'Subject Code' textbox and you can enter maxNumber upto 100<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"subjectDetailsFormGroup.controls.obtainedMarks.errors\">{{subjectDetailsFormGroup.controls.obtainedMarks.errors.maxNumber.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Maximum Marks for above subject code</label>\r\n      <input type=\"text\" formControlName=\"maximumMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">To apply the validation of Max Number on 'Maximum Marks' field, then enter the value '8CS5A' in 'Subject Code' textbox and you can enter maxNumber upto 100<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"subjectDetailsFormGroup.controls.maximumMarks.errors\">{{subjectDetailsFormGroup.controls.maximumMarks.errors.maxNumber.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!subjectDetailsFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null,"Json":null},"valueExample":{"Notes":[],"Component":"","Html":"","Model":"            obtainedMarks:['', RxwebValidators.maxNumber({value:100  ,conditionalExpression:'x => x.subjectCode == \"8CS5A\"' })], ","Json":null},"conditionalExpression":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-maxNumber-conditionalExpression-validator',\r\n    templateUrl: './max-number-conditional-expression.component.html'\r\n})\r\nexport class MaxNumberConditionalExpressionValidatorComponent implements OnInit {\r\n    subjectDetailsFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder)\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.subjectDetailsFormGroup = this.formBuilder.group({\r\n            subjectCode:['',], \r\n            obtainedMarks:['', RxwebValidators.maxNumber({value:100  ,conditionalExpression:'x => x.subjectCode == \"8CS5A\"' })], \r\n            maximumMarks:['', RxwebValidators.maxNumber({value:100  ,conditionalExpression:(x,y) => x.subjectCode == \"8CS5A\"  })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"subjectDetailsFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Subject Code</label>\r\n      <input type=\"text\" formControlName=\"subjectCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Maximum Marks' or 'Obtained Marks', then you need to add 'Type' input as '8CS5A'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"subjectDetailsFormGroup.controls.subjectCode.errors\">{{subjectDetailsFormGroup.controls.subjectCode.errors.maxNumber.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Obtained Marks for above subject code</label>\r\n      <input type=\"text\" formControlName=\"obtainedMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">To apply the validation of Max Number on 'Obtained Marks' field, then enter the value '8CS5A' in 'Subject Code' textbox and you can enter maxNumber upto 100<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"subjectDetailsFormGroup.controls.obtainedMarks.errors\">{{subjectDetailsFormGroup.controls.obtainedMarks.errors.maxNumber.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Maximum Marks for above subject code</label>\r\n      <input type=\"text\" formControlName=\"maximumMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">To apply the validation of Max Number on 'Maximum Marks' field, then enter the value '8CS5A' in 'Subject Code' textbox and you can enter maxNumber upto 100<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"subjectDetailsFormGroup.controls.maximumMarks.errors\">{{subjectDetailsFormGroup.controls.maximumMarks.errors.maxNumber.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!subjectDetailsFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null,"Json":null},"conditionalExpressionExampleString":{"Notes":["Binding <span class='highlighted'>conditionalExpression </span> with <span class='highlighted'> string</span> object."],"Component":null,"Html":null,"Model":"            obtainedMarks:['', RxwebValidators.maxNumber({value:100  ,conditionalExpression:'x => x.subjectCode == \"8CS5A\"' })], ","Json":null},"conditionalExpressionExampleFunction":{"Notes":["Binding <span class='highlighted'>conditionalExpression </span> with <span class='highlighted'> Function</span> object."],"Component":null,"Html":null,"Model":"            maximumMarks:['', RxwebValidators.maxNumber({value:100  ,conditionalExpression:(x,y) => x.subjectCode == \"8CS5A\"  })], ","Json":null},"message":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-maxNumber-message-validator',\r\n    templateUrl: './max-number-message.component.html'\r\n})\r\nexport class MaxNumberMessageValidatorComponent implements OnInit {\r\n    subjectDetailsFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder)\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.subjectDetailsFormGroup = this.formBuilder.group({\r\n            passingMarks:['', RxwebValidators.maxNumber({value:50  ,message:'{{0}} exceeds the Maximum marks Limit' })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"subjectDetailsFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Passing Marks</label>\r\n      <input type=\"text\" formControlName=\"passingMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter MaxNumber upto 50<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"subjectDetailsFormGroup.controls.passingMarks.errors\">{{subjectDetailsFormGroup.controls.passingMarks.errors.maxNumber.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!subjectDetailsFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null,"Json":null},"messageExample":{"Notes":[],"Component":"","Html":"","Model":"            passingMarks:['', RxwebValidators.maxNumber({value:50  ,message:'{{0}} exceeds the Maximum marks Limit' })], ","Json":null},"dynamic":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormBuilderConfiguration} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-maxNumber-dynamic-validator',\r\n    templateUrl: './max-number-dynamic.component.html'\r\n})\r\nexport class MaxNumberDynamicValidatorComponent implements OnInit {\r\n    subjectDetailsFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder , private http: HttpClient )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n\t\tlet formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/validators/maxNumber/dynamic/dynamic.json').subscribe(dynamic => {\r\n\t\t\tformBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tvar subjectDetails = { subjectCode:'', maximumMarks:'', obtainedMarks:'', passingMarks:'',  }\r\n\t\t\tthis.subjectDetailsFormGroup = this.formBuilder.group(subjectDetails,formBuilderConfiguration);\r\n\t\t})\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  *ngIf=\"subjectDetailsFormGroup\"  [formGroup]=\"subjectDetailsFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Subject Code</label>\r\n      <input type=\"text\" formControlName=\"subjectCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Maximum Marks' or 'Obtained Marks', then you need to add 'Type' input as '8CS5A'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"subjectDetailsFormGroup.controls.subjectCode.errors\">{{subjectDetailsFormGroup.controls.subjectCode.errors.maxNumber.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Obtained Marks for above subject code</label>\r\n      <input type=\"text\" formControlName=\"obtainedMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">To apply the validation of Max Number on 'Obtained Marks' field, then enter the value '8CS5A' in 'Subject Code' textbox and you can enter maxNumber upto 100<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"subjectDetailsFormGroup.controls.obtainedMarks.errors\">{{subjectDetailsFormGroup.controls.obtainedMarks.errors.maxNumber.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Passing Marks</label>\r\n      <input type=\"text\" formControlName=\"passingMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter MaxNumber upto 50<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"subjectDetailsFormGroup.controls.passingMarks.errors\">{{subjectDetailsFormGroup.controls.passingMarks.errors.maxNumber.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!subjectDetailsFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null,"Json":"{\"subjectCode\":{\"maxNumber\":true},\"obtainedMarks\":{\"value\":\"100\",\"conditionalExpression\":\"'x => x.subjectCode == \\\"8CS5A\\\"'\"},\"passingMarks\":{\"value\":\"50\",\"message\":\"'{{0}} exceeds the Maximum marks Limit'\"}}"},"add":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-maxNumber-add-validator',\r\n    templateUrl: './max-number-add.component.html'\r\n})\r\nexport class MaxNumberAddValidatorComponent implements OnInit {\r\n    subjectDetailsFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder)\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.subjectDetailsFormGroup = this.formBuilder.group({\r\n            passingMarks:['', RxwebValidators.maxNumber({value:50 })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"subjectDetailsFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Passing Marks</label>\r\n      <input type=\"text\" formControlName=\"passingMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter MaxNumber upto 50<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"subjectDetailsFormGroup.controls.passingMarks.errors\">{{subjectDetailsFormGroup.controls.passingMarks.errors.maxNumber.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!subjectDetailsFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null,"Json":null}}