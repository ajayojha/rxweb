{"complete":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-alpha-complete-validator',\r\n    templateUrl: './alpha-complete.component.html'\r\n})\r\nexport class AlphaCompleteValidatorComponent implements OnInit {\r\n    addressInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder)\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.addressInfoFormGroup = this.formBuilder.group({\r\n            countryName:['', RxwebValidators.alpha()], \r\n            countryCode:['', RxwebValidators.alpha({conditionalExpression:(x,y) => x.countryName == \"India\" })], \r\n            cityName:['', RxwebValidators.alpha({conditionalExpression:'x => x.countryName ==\"India\"' })], \r\n            stateName:['', RxwebValidators.alpha({allowWhiteSpace:true })], \r\n            stateCode:['', RxwebValidators.alpha({message:'You can enter only alphabets.' })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"addressInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n      <input type=\"text\" formControlName=\"countryName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Country Code' or 'City' then you need to add this input as 'India'.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryName.errors\">{{addressInfoFormGroup.controls.countryName.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Country Code</label>\r\n      <input type=\"text\" formControlName=\"countryCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Country Code' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryCode.errors\">{{addressInfoFormGroup.controls.countryCode.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City</label>\r\n      <input type=\"text\" formControlName=\"cityName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'City' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.cityName.errors\">{{addressInfoFormGroup.controls.cityName.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>State Name</label>\r\n      <input type=\"text\" formControlName=\"stateName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This allowed whitespace in alpha validation<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateName.errors\">{{addressInfoFormGroup.controls.stateName.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>State Code</label>\r\n      <input type=\"text\" formControlName=\"stateCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateCode.errors\">{{addressInfoFormGroup.controls.stateCode.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null,"Json":null},"conditionalExpression":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-alpha-conditionalExpression-validator',\r\n    templateUrl: './alpha-conditional-expression.component.html'\r\n})\r\nexport class AlphaConditionalExpressionValidatorComponent implements OnInit {\r\n    addressInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder)\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.addressInfoFormGroup = this.formBuilder.group({\r\n            countryName:['', RxwebValidators.alpha()], \r\n            cityName:['', RxwebValidators.alpha({conditionalExpression:'x => x.countryName ==\"India\"' })], \r\n            countryCode:['', RxwebValidators.alpha({conditionalExpression:(x,y) => x.countryName == \"India\" })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"addressInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n      <input type=\"text\" formControlName=\"countryName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Country Code' or 'City' then you need to add this input as 'India'.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryName.errors\">{{addressInfoFormGroup.controls.countryName.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City</label>\r\n      <input type=\"text\" formControlName=\"cityName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'City' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.cityName.errors\">{{addressInfoFormGroup.controls.cityName.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Country Code</label>\r\n      <input type=\"text\" formControlName=\"countryCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Country Code' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryCode.errors\">{{addressInfoFormGroup.controls.countryCode.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null,"Json":null},"conditionalExpressionExampleString":{"Notes":["Binding <span class='highlighted'>conditionalExpression </span> with <span class='highlighted'> string</span> object."],"Component":null,"Html":null,"Model":"            cityName:['', RxwebValidators.alpha({conditionalExpression:'x => x.countryName ==\"India\"' })], ","Json":null},"conditionalExpressionExampleFunction":{"Notes":["Binding <span class='highlighted'>conditionalExpression </span> with <span class='highlighted'> Function</span> object."],"Component":null,"Html":null,"Model":"            countryCode:['', RxwebValidators.alpha({conditionalExpression:(x,y) => x.countryName == \"India\" })], ","Json":null},"allowWhiteSpace":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-alpha-allowWhiteSpace-validator',\r\n    templateUrl: './alpha-allow-white-space.component.html'\r\n})\r\nexport class AlphaAllowWhiteSpaceValidatorComponent implements OnInit {\r\n    addressInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder)\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.addressInfoFormGroup = this.formBuilder.group({\r\n            stateName:['', RxwebValidators.alpha({allowWhiteSpace:true })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"addressInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>State Name</label>\r\n      <input type=\"text\" formControlName=\"stateName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This allowed whitespace in alpha validation<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateName.errors\">{{addressInfoFormGroup.controls.stateName.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null,"Json":null},"allowWhiteSpaceExample":{"Notes":[],"Component":"","Html":"","Model":"            stateName:['', RxwebValidators.alpha({allowWhiteSpace:true })], ","Json":null},"message":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-alpha-message-validator',\r\n    templateUrl: './alpha-message.component.html'\r\n})\r\nexport class AlphaMessageValidatorComponent implements OnInit {\r\n    addressInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder)\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.addressInfoFormGroup = this.formBuilder.group({\r\n            stateCode:['', RxwebValidators.alpha({message:'You can enter only alphabets.' })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"addressInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>State Code</label>\r\n      <input type=\"text\" formControlName=\"stateCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateCode.errors\">{{addressInfoFormGroup.controls.stateCode.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null,"Json":null},"messageExample":{"Notes":[],"Component":"","Html":"","Model":"            stateCode:['', RxwebValidators.alpha({message:'You can enter only alphabets.' })], ","Json":null},"dynamic":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormBuilderConfiguration} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-alpha-dynamic-validator',\r\n    templateUrl: './alpha-dynamic.component.html'\r\n})\r\nexport class AlphaDynamicValidatorComponent implements OnInit {\r\n    addressInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder , private http: HttpClient )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n\t\tlet formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/validators/alpha/dynamic/dynamic.json').subscribe(dynamic => {\r\n\t\t\tformBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tvar addressInfo = { countryName:'', countryCode:'', cityName:'', stateName:'', stateCode:'',  }\r\n\t\t\tthis.addressInfoFormGroup = this.formBuilder.group(addressInfo,formBuilderConfiguration);\r\n\t\t})\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  *ngIf=\"addressInfoFormGroup\"  [formGroup]=\"addressInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n      <input type=\"text\" formControlName=\"countryName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Country Code' or 'City' then you need to add this input as 'India'.<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryName.errors\">{{addressInfoFormGroup.controls.countryName.errors.alpha.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City</label>\r\n      <input type=\"text\" formControlName=\"cityName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'City' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.cityName.errors\">{{addressInfoFormGroup.controls.cityName.errors.alpha.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>State Name</label>\r\n      <input type=\"text\" formControlName=\"stateName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This allowed whitespace in alpha validation<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateName.errors\">{{addressInfoFormGroup.controls.stateName.errors.alpha.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>State Code</label>\r\n      <input type=\"text\" formControlName=\"stateCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateCode.errors\">{{addressInfoFormGroup.controls.stateCode.errors.alpha.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null,"Json":"{\"countryName\":{\"alpha\":true},\"cityName\":{\"conditionalExpression\":\"'x => x.countryName ==\\\"India\\\"'\"},\"stateName\":{\"allowWhiteSpace\":\"true\"},\"stateCode\":{\"message\":\"'You can enter only alphabets.'\"}}"},"add":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-alpha-add-validator',\r\n    templateUrl: './alpha-add.component.html'\r\n})\r\nexport class AlphaAddValidatorComponent implements OnInit {\r\n    countryFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder)\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.countryFormGroup = this.formBuilder.group({\r\n            countryName:['', RxwebValidators.alpha()], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"countryFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n      <input type=\"text\" formControlName=\"countryName\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"countryFormGroup.controls.countryName.errors\">{{countryFormGroup.controls.countryName.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!countryFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null,"Json":null}}