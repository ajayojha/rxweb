{"complete":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-primeNumber-complete-validator',\r\n    templateUrl: './prime-number-complete.component.html'\r\n})\r\nexport class PrimeNumberCompleteValidatorComponent implements OnInit {\r\n    numberInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder)\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.numberInfoFormGroup = this.formBuilder.group({\r\n            numberType:['',], \r\n            secondNumber:['', RxwebValidators.primeNumber({conditionalExpression:(x,y) => x.numberType == \"Prime\"  })], \r\n            thirdNumber:['', RxwebValidators.primeNumber({conditionalExpression:'x => x.numberType ==\"Prime\"' })], \r\n            firstNumber:['', RxwebValidators.primeNumber({message:'{{0}} is not a prime number' })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"numberInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Number Type</label>\r\n      <input type=\"text\" formControlName=\"numberType\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Second Number' or 'Third Number', then you need to add 'Number Type' input as 'Prime'.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"numberInfoFormGroup.controls.numberType.errors\">{{numberInfoFormGroup.controls.numberType.errors.primeNumber.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Second Number</label>\r\n      <input type=\"text\" formControlName=\"secondNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Second Number' then you need to add 'Number Type' input as 'Prime'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"numberInfoFormGroup.controls.secondNumber.errors\">{{numberInfoFormGroup.controls.secondNumber.errors.primeNumber.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Third Number</label>\r\n      <input type=\"text\" formControlName=\"thirdNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Third Number' then you need to add 'Number Type' input as 'Prime'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"numberInfoFormGroup.controls.thirdNumber.errors\">{{numberInfoFormGroup.controls.thirdNumber.errors.primeNumber.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>First Number</label>\r\n      <input type=\"text\" formControlName=\"firstNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">You can enter only prime number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"numberInfoFormGroup.controls.firstNumber.errors\">{{numberInfoFormGroup.controls.firstNumber.errors.primeNumber.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!numberInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null,"Json":null},"conditionalExpression":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-primeNumber-conditionalExpression-validator',\r\n    templateUrl: './prime-number-conditional-expression.component.html'\r\n})\r\nexport class PrimeNumberConditionalExpressionValidatorComponent implements OnInit {\r\n    numberInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder)\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.numberInfoFormGroup = this.formBuilder.group({\r\n            numberType:['',], \r\n            thirdNumber:['', RxwebValidators.primeNumber({conditionalExpression:'x => x.numberType ==\"Prime\"' })], \r\n            secondNumber:['', RxwebValidators.primeNumber({conditionalExpression:(x,y) => x.numberType == \"Prime\"  })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"numberInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Number Type</label>\r\n      <input type=\"text\" formControlName=\"numberType\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Second Number' or 'Third Number', then you need to add 'Number Type' input as 'Prime'.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"numberInfoFormGroup.controls.numberType.errors\">{{numberInfoFormGroup.controls.numberType.errors.primeNumber.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Third Number</label>\r\n      <input type=\"text\" formControlName=\"thirdNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Third Number' then you need to add 'Number Type' input as 'Prime'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"numberInfoFormGroup.controls.thirdNumber.errors\">{{numberInfoFormGroup.controls.thirdNumber.errors.primeNumber.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Second Number</label>\r\n      <input type=\"text\" formControlName=\"secondNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Second Number' then you need to add 'Number Type' input as 'Prime'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"numberInfoFormGroup.controls.secondNumber.errors\">{{numberInfoFormGroup.controls.secondNumber.errors.primeNumber.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!numberInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null,"Json":null},"conditionalExpressionExampleString":{"Notes":["Binding <span class='highlighted'>conditionalExpression </span> with <span class='highlighted'> string</span> object."],"Component":null,"Html":null,"Model":"            thirdNumber:['', RxwebValidators.primeNumber({conditionalExpression:'x => x.numberType ==\"Prime\"' })], ","Json":null},"conditionalExpressionExampleFunction":{"Notes":["Binding <span class='highlighted'>conditionalExpression </span> with <span class='highlighted'> Function</span> object."],"Component":null,"Html":null,"Model":"            secondNumber:['', RxwebValidators.primeNumber({conditionalExpression:(x,y) => x.numberType == \"Prime\"  })], ","Json":null},"message":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-primeNumber-message-validator',\r\n    templateUrl: './prime-number-message.component.html'\r\n})\r\nexport class PrimeNumberMessageValidatorComponent implements OnInit {\r\n    numberInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder)\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.numberInfoFormGroup = this.formBuilder.group({\r\n            firstNumber:['', RxwebValidators.primeNumber({message:'{{0}} is not a prime number' })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"numberInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>First Number</label>\r\n      <input type=\"text\" formControlName=\"firstNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">You can enter only prime number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"numberInfoFormGroup.controls.firstNumber.errors\">{{numberInfoFormGroup.controls.firstNumber.errors.primeNumber.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!numberInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null,"Json":null},"messageExample":{"Notes":[],"Component":"","Html":"","Model":"            firstNumber:['', RxwebValidators.primeNumber({message:'{{0}} is not a prime number' })], ","Json":null},"dynamic":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormBuilderConfiguration} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-primeNumber-dynamic-validator',\r\n    templateUrl: './prime-number-dynamic.component.html'\r\n})\r\nexport class PrimeNumberDynamicValidatorComponent implements OnInit {\r\n    numberInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder , private http: HttpClient )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n\t\tlet formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/validators/primeNumber/dynamic/dynamic.json').subscribe(dynamic => {\r\n\t\t\tformBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tvar numberInfo = { numberType:'', secondNumber:'', thirdNumber:'', firstNumber:'',  }\r\n\t\t\tthis.numberInfoFormGroup = this.formBuilder.group(numberInfo,formBuilderConfiguration);\r\n\t\t})\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  *ngIf=\"numberInfoFormGroup\"  [formGroup]=\"numberInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Number Type</label>\r\n      <input type=\"text\" formControlName=\"numberType\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Second Number' or 'Third Number', then you need to add 'Number Type' input as 'Prime'.<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"numberInfoFormGroup.controls.numberType.errors\">{{numberInfoFormGroup.controls.numberType.errors.primeNumber.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Third Number</label>\r\n      <input type=\"text\" formControlName=\"thirdNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Third Number' then you need to add 'Number Type' input as 'Prime'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"numberInfoFormGroup.controls.thirdNumber.errors\">{{numberInfoFormGroup.controls.thirdNumber.errors.primeNumber.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>First Number</label>\r\n      <input type=\"text\" formControlName=\"firstNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">You can enter only prime number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"numberInfoFormGroup.controls.firstNumber.errors\">{{numberInfoFormGroup.controls.firstNumber.errors.primeNumber.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!numberInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null,"Json":"{\"numberType\":{\"primeNumber\":true},\"thirdNumber\":{\"conditionalExpression\":\"'x => x.numberType ==\\\"Prime\\\"'\"},\"firstNumber\":{\"message\":\"'{{0}} is not a prime number'\"}}"},"add":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-primeNumber-add-validator',\r\n    templateUrl: './prime-number-add.component.html'\r\n})\r\nexport class PrimeNumberAddValidatorComponent implements OnInit {\r\n    numberInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder)\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.numberInfoFormGroup = this.formBuilder.group({\r\n            firstNumber:['', RxwebValidators.primeNumber()], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"numberInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>First Number</label>\r\n      <input type=\"text\" formControlName=\"firstNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">You must enter a proper prime number<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"numberInfoFormGroup.controls.firstNumber.errors\">{{numberInfoFormGroup.controls.firstNumber.errors.primeNumber.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!numberInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null,"Json":null}}