{"complete":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-dataUri-complete-validator',\r\n    templateUrl: './data-uri-complete.component.html'\r\n})\r\nexport class DataUriCompleteValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder)\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            scheme:['',], \r\n            cssDataUri:['', RxwebValidators.dataUri({conditionalExpression:(x,y) => x.scheme == \"DataUri\"  })], \r\n            javascriptDataUri:['', RxwebValidators.dataUri({conditionalExpression:'x => x.scheme ==\"DataUri\"' })], \r\n            htmlDataUri:['', RxwebValidators.dataUri({message:'{{0}} is not a proper data URI' })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Scheme</label>\r\n      <input type=\"text\" formControlName=\"scheme\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'CSS Data Uri' or 'Javascript Data Uri', then you need to add 'Scheme' input as 'DataUri'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.scheme.errors\">{{userFormGroup.controls.scheme.errors.dataUri.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>CSS Data Uri</label>\r\n      <input type=\"text\" formControlName=\"cssDataUri\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'CSS Data Uri' then you need to add 'Scheme' input as 'DataUri'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.cssDataUri.errors\">{{userFormGroup.controls.cssDataUri.errors.dataUri.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Javascript Data Uri</label>\r\n      <input type=\"text\" formControlName=\"javascriptDataUri\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Javascript Data Uri' then you need to add 'Scheme' input as 'DataUri'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.javascriptDataUri.errors\">{{userFormGroup.controls.javascriptDataUri.errors.dataUri.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>HTML Data Uri</label>\r\n      <input type=\"text\" formControlName=\"htmlDataUri\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">enter Data URI only<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.htmlDataUri.errors\">{{userFormGroup.controls.htmlDataUri.errors.dataUri.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null,"Json":null},"conditionalExpression":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-dataUri-conditionalExpression-validator',\r\n    templateUrl: './data-uri-conditional-expression.component.html'\r\n})\r\nexport class DataUriConditionalExpressionValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder)\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            scheme:['',], \r\n            javascriptDataUri:['', RxwebValidators.dataUri({conditionalExpression:'x => x.scheme ==\"DataUri\"' })], \r\n            cssDataUri:['', RxwebValidators.dataUri({conditionalExpression:(x,y) => x.scheme == \"DataUri\"  })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Scheme</label>\r\n      <input type=\"text\" formControlName=\"scheme\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'CSS Data Uri' or 'Javascript Data Uri', then you need to add 'Scheme' input as 'DataUri'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.scheme.errors\">{{userFormGroup.controls.scheme.errors.dataUri.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Javascript Data Uri</label>\r\n      <input type=\"text\" formControlName=\"javascriptDataUri\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Javascript Data Uri' then you need to add 'Scheme' input as 'DataUri'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.javascriptDataUri.errors\">{{userFormGroup.controls.javascriptDataUri.errors.dataUri.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>CSS Data Uri</label>\r\n      <input type=\"text\" formControlName=\"cssDataUri\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'CSS Data Uri' then you need to add 'Scheme' input as 'DataUri'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.cssDataUri.errors\">{{userFormGroup.controls.cssDataUri.errors.dataUri.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null,"Json":null},"conditionalExpressionExampleString":{"Notes":["Binding <span class='highlighted'>conditionalExpression </span> with <span class='highlighted'> string</span> object."],"Component":null,"Html":null,"Model":"            javascriptDataUri:['', RxwebValidators.dataUri({conditionalExpression:'x => x.scheme ==\"DataUri\"' })], ","Json":null},"conditionalExpressionExampleFunction":{"Notes":["Binding <span class='highlighted'>conditionalExpression </span> with <span class='highlighted'> Function</span> object."],"Component":null,"Html":null,"Model":"            cssDataUri:['', RxwebValidators.dataUri({conditionalExpression:(x,y) => x.scheme == \"DataUri\"  })], ","Json":null},"message":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-dataUri-message-validator',\r\n    templateUrl: './data-uri-message.component.html'\r\n})\r\nexport class DataUriMessageValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder)\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            htmlDataUri:['', RxwebValidators.dataUri({message:'{{0}} is not a proper data URI' })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>HTML Data Uri</label>\r\n      <input type=\"text\" formControlName=\"htmlDataUri\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">enter Data URI only<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.htmlDataUri.errors\">{{userFormGroup.controls.htmlDataUri.errors.dataUri.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null,"Json":null},"messageExample":{"Notes":[],"Component":"","Html":"","Model":"            htmlDataUri:['', RxwebValidators.dataUri({message:'{{0}} is not a proper data URI' })], ","Json":null},"dynamic":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormBuilderConfiguration} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-dataUri-dynamic-validator',\r\n    templateUrl: './data-uri-dynamic.component.html'\r\n})\r\nexport class DataUriDynamicValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder , private http: HttpClient )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n\t\tlet formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/validators/dataUri/dynamic/dynamic.json').subscribe(dynamic => {\r\n\t\t\tformBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tvar user = { scheme:'', cssDataUri:'', javascriptDataUri:'', htmlDataUri:'',  }\r\n\t\t\tthis.userFormGroup = this.formBuilder.group(user,formBuilderConfiguration);\r\n\t\t})\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  *ngIf=\"userFormGroup\"  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Scheme</label>\r\n      <input type=\"text\" formControlName=\"scheme\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'CSS Data Uri' or 'Javascript Data Uri', then you need to add 'Scheme' input as 'DataUri'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.scheme.errors\">{{userFormGroup.controls.scheme.errors.dataUri.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Javascript Data Uri</label>\r\n      <input type=\"text\" formControlName=\"javascriptDataUri\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Javascript Data Uri' then you need to add 'Scheme' input as 'DataUri'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.javascriptDataUri.errors\">{{userFormGroup.controls.javascriptDataUri.errors.dataUri.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>HTML Data Uri</label>\r\n      <input type=\"text\" formControlName=\"htmlDataUri\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">enter Data URI only<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.htmlDataUri.errors\">{{userFormGroup.controls.htmlDataUri.errors.dataUri.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null,"Json":"{\"scheme\":{\"dataUri\":true},\"javascriptDataUri\":{\"conditionalExpression\":\"'x => x.scheme ==\\\"DataUri\\\"'\"},\"htmlDataUri\":{\"message\":\"'{{0}} is not a proper data URI'\"}}"},"add":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-dataUri-add-validator',\r\n    templateUrl: './data-uri-add.component.html'\r\n})\r\nexport class DataUriAddValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder)\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            htmlDataUri:['', RxwebValidators.dataUri()], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>HTML Data Uri</label>\r\n      <input type=\"text\" formControlName=\"htmlDataUri\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">You must enter a data URI<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.htmlDataUri.errors\">{{userFormGroup.controls.htmlDataUri.errors.dataUri.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null,"Json":null}}